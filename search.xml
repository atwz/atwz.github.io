<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>挨踢小子对数据库的宏观认知</title>
      <link href="/2018/09/11/ai-ti-xiao-zi-dui-shu-ju-ku-de-hong-guan-ren-zhi/"/>
      <url>/2018/09/11/ai-ti-xiao-zi-dui-shu-ju-ku-de-hong-guan-ren-zhi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>公众号：挨踢小子</p></blockquote><h4 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h4><p>作为初学者，我想您很有必要对数据库有一个宏观上的认知，因为这对您将来的学习很重要。毕竟作为非科班出身的我，在这条路上，也曾波折坎坷。（如文中所述有误，望加以斧正）</p><h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h5><p>出自百度百科：<br><img src="https://img-blog.csdnimg.cn/20190821145158459.png" alt="在这里插入图片描述"><br>数据库：存储电子文件的处所，用户可以对文件中的数据进行新增、查询、更新、删除。</p><h4 id="2、故事"><a href="#2、故事" class="headerlink" title="2、故事"></a>2、故事</h4><p>其实，挨踢也曾受训于某某培训学校，当然总的来说，我还是很感激这里的，毕竟这是我走上挨踢之路的开始。故事发生在2016年盛夏，我曾于课堂公然质问老师，（原谅挨踢有点骚，嘿嘿）因为MySQL教学，已经接近尾声了，而我一直有一事不解，我说：老师，您说，数据库可存万事万物，可我至今仍有一事不明，图片、视频、音频、等这些该如何存储……其实，这并不是我上课不曾认真听课，当然也不是这个老师教学失职，毕竟很多知识在熟悉之后，早已习以为常。这也就是我为何要写这篇文章的缘由和初衷。</p><h4 id="3、认知"><a href="#3、认知" class="headerlink" title="3、认知"></a>3、认知</h4><p>对的，没错，数据库可存万事万物，您可以把数据库看做，观音菩萨的玉净瓶，托塔天王的玲珑塔，当然，现实生活中并不存在什么玉净瓶，玲珑塔，无非都是虚拟的，请注意“虚拟”这个词。<br>话题回归到我们的数据库，我们就好比托塔天王，而数据库，就是我们手里的玲珑宝塔，我们可以借用我们的法器，将江河湖泊，妖魔鬼怪……收容进我们的宝塔里面，只要进了咱们的地盘，自然就可以任由我等宰割。<br>可能说到这里，您还是很不理解，是不是，突然想说句我操，扯了半天，我到底怎么去存这些玩意。<br>好，之前我让您记住的那个词，“虚拟”还记得吧！其实我们存在数据库里面的东西，大多都是抽象化、数字化、符号化的。也就是说，用了另一种形式去代替我们所说的万事万物。比如，图片名称、路径……<br>哈哈，是不是突然，恍然大悟，颇有体会之感。</p><h4 id="4、总结"><a href="#4、总结" class="headerlink" title="4、总结"></a>4、总结</h4><p>数据库是可以存抽象化、符号化、数字化等类型信息的一个存储工具，我们可以对存进去的信息做任何处理，较常用的如（增加、修改、查询、删除）等操作。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL中FIND_IN_SET的探索征程</title>
      <link href="/2018/01/22/mysql-zhong-find-in-set-de-tan-suo-zheng-cheng/"/>
      <url>/2018/01/22/mysql-zhong-find-in-set-de-tan-suo-zheng-cheng/</url>
      
        <content type="html"><![CDATA[<p><strong>挨踢专场</strong>：无论是应对开发，还是面试求职，那些不为人知的东西，总是在不经意间突显着你的才能，或为你升职加薪提供踏板，或为你解决问题激发灵感。总之，不会就查，不懂就问，开发之路，事半功倍。</p><h6 id="1、狭路相逢"><a href="#1、狭路相逢" class="headerlink" title="1、狭路相逢"></a>1、狭路相逢</h6><p>项目开发，纯属偶遇，结识 FIND_IN_SET ，想必前世有那么一点小故事……</p><h6 id="2、一头雾水"><a href="#2、一头雾水" class="headerlink" title="2、一头雾水"></a>2、一头雾水</h6><p>数据库字段部分截图：<br><img src="https://img-blog.csdnimg.cn/20190917110747400.png" alt="在这里插入图片描述"></p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> t<span class="token punctuation">.</span>dept_id <span class="token keyword">FROM</span> sys_dept t <span class="token keyword">WHERE</span> FIND_IN_SET <span class="token punctuation">(</span><span class="token number">102</span><span class="token punctuation">,</span>ancestors<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20190917110820292.png" alt="加粗样式"></p><pre class="line-numbers language-java"><code class="language-java">疑问<span class="token number">01</span>：where 后面这跟的是条件吗？疑问<span class="token number">02</span>：<span class="token function">find_in_set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>这怎么用呢？<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h6 id="3、探得究竟"><a href="#3、探得究竟" class="headerlink" title="3、探得究竟"></a>3、探得究竟</h6><p>贴图：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> t<span class="token punctuation">.</span>dept_id <span class="token keyword">FROM</span> sys_dept t <span class="token keyword">WHERE</span>  <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20190917110948583.png" alt="在这里插入图片描述"></p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> t<span class="token punctuation">.</span>dept_id <span class="token keyword">FROM</span> sys_dept t<span class="token keyword">WHERE</span>  <span class="token operator">-</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20190917111035484.png" alt="在这里插入图片描述"></p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> t<span class="token punctuation">.</span>dept_id <span class="token keyword">FROM</span> sys_dept t <span class="token keyword">WHERE</span>  <span class="token number">12</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20190917111055844.png" alt="在这里插入图片描述"><br>是不是一脸懵逼，不是说好的条件的吗？？？</p><h6 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h6><p>Aiti：其实我们大家都知道，where 后面跟随各种查询条件，但是从来没有这么写过，即便是应对开发，也很少有人写到。其实where 类似于 if  就是对条件的判断，返回 true  or  false。在检索过程中，将满足条件的，即条件为true的结果返回。where能实现类型转换，这一点十分类似JavaScript中的if语句的用法。</p><h6 id="4、原来如此"><a href="#4、原来如此" class="headerlink" title="4、原来如此"></a>4、原来如此</h6><p>众里寻它千百度，sodesiga，好吧！原来就是个这。</p><p>FIND_IN_SET(str,strlist)</p><p>第一个参数str是要查找的字符串。</p><p>第二个参数strlist是要搜索的逗号分隔的字符串列表。</p><p>贴图：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> FIND_IN_SET<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20190917111208564.png" alt="在这里插入图片描述"><br>刚说好的字符串，你就给我来个这，mysql你怎么可以这么随意呢！</p><p><img src="https://img-blog.csdnimg.cn/20190917111221836.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190917111231928.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190917111239692.png" alt="在这里插入图片描述"><br>以上图示，有劳读友自行总结</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> t<span class="token punctuation">.</span>dept_id<span class="token punctuation">,</span>t<span class="token punctuation">.</span>parent_id<span class="token punctuation">,</span>t<span class="token punctuation">.</span>ancestors<span class="token keyword">FROM</span> sys_dept t <span class="token keyword">WHERE</span> FIND_IN_SET <span class="token punctuation">(</span>dept_id<span class="token punctuation">,</span><span class="token string">'100,101,102,'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20190917111315730.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3MTI2MzU3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>Aiti：将dept_id，依次等于100,101,102的结果，返回。类似于In 集合操作</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> t<span class="token punctuation">.</span>dept_id<span class="token punctuation">,</span>t<span class="token punctuation">.</span>parent_id<span class="token punctuation">,</span>t<span class="token punctuation">.</span>ancestors <span class="token keyword">FROM</span> sys_dept t <span class="token keyword">WHERE</span> dept_id  <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">102</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/2019091711134238.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring、SpringMVC、 SpringBoot和SpringCloud概念的</title>
      <link href="/2018/01/22/spring-springmvc-springboot-he-springcloud-gai-nian-de/"/>
      <url>/2018/01/22/spring-springmvc-springboot-he-springcloud-gai-nian-de/</url>
      
        <content type="html"><![CDATA[<h5 id="1、Spring"><a href="#1、Spring" class="headerlink" title="1、Spring"></a>1、Spring</h5><p>Spring 是一个开源框架，起初是为解决企业应用开发的复杂性而创建，但是现在已经不止于企业应用。<strong>Spring的核心就是提供一个轻量级的控制反转（IOC）和面向切面（AOP）的容器框架。</strong></p><h5 id="2、Spring-MVC"><a href="#2、Spring-MVC" class="headerlink" title="2、Spring MVC"></a>2、Spring MVC</h5><p><strong>Spring MVC可以理解为Spring和MVC结合的一种开发架构</strong>，应用于web层的容器框架，Spring的概念可以参阅上面所述。<strong>MVC是一种将数据业务、显示逻辑和控制逻辑进行分层的设计模式，</strong> 业内常见的mvc开发框架有Struts1、Struts2等。SpringMVC是用于Web程序的通用框架。</p><h5 id="3、SpringBoot"><a href="#3、SpringBoot" class="headerlink" title="3、SpringBoot"></a>3、SpringBoot</h5><p>SpringBoot是用来简化Spring框架应用初始化搭建以及开发的全新框架，比如通过自动化配置省去了大量繁琐的配置文件，因此SpringBoot可以理解成，一个通过简化配置文件来服务于框架的框架。<br>SpringBoot工程使用包括如下特点和优点：</p><p>创建独立的Spring应用程序，简化Maven配置，可以快速构建Spring项目</p><p>一个简单的SpringBoot工程是不需要在pom.xml中手动添加配置的，如果与其它技术合用，比如postMan（文档在线自动生成、开发功能测试的一套工具）、Swagger（文档在线自动生成、开发功能测试的一套工具），则需要在pom.xml中添加依赖，由程序自动添加依赖jar包等配置文件。</p><p>在SpringBoot创建时会自动创建Bootdemo1Application启动类，代表着本工程项目和服务器的启动加载，在springBoot中嵌入有Tomcat服务器的，无需手动部署war文件。</p><h5 id="4、SpringCloud"><a href="#4、SpringCloud" class="headerlink" title="4、SpringCloud"></a>4、SpringCloud</h5><p><strong>SpringCloud是分布式微服务架构下的一站式解决方案，是各个微服务架构落地技术得集合体</strong>，俗称微服务栈解决方案。</p><p> <strong>SpringCloud和SpringBoot之间的关系</strong>:</p><p>1、SpringCloud偏于宏观，SpringBoot偏微观。如果将SpringBoot比作成医院里一个一个的科室，SpringCloud则是将SpringBoot组合起来对外的综合医院。</p><p>2、SpringBoot可以单独使用，不依赖于SpringCloud，而SpringCloud必然依赖于Spring Boot，属于依赖关系。</p><p>3、SpringBoot专注于快速的开发单个个体微服务。SpringCloud是关注于全局的微服务协调整理治理框架，它将SpringBoot开发的一个个单个微服务整合并管理起来，为各个微服务之间提供配置管理、服务发现、断路器、路由、微代理、事件总线、全局锁、决策竞选、分布式会话等等集成服务。 </p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MVC原理和MVC模式的优缺点</title>
      <link href="/2018/01/22/mvc-yuan-li-he-mvc-mo-shi-de-you-que-dian/"/>
      <url>/2018/01/22/mvc-yuan-li-he-mvc-mo-shi-de-you-que-dian/</url>
      
        <content type="html"><![CDATA[<h5 id="一、MVC原理"><a href="#一、MVC原理" class="headerlink" title="一、MVC原理"></a>一、MVC原理</h5><p><img src="https://img-blog.csdnimg.cn/20190904110106736.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3MTI2MzU3,size_16,color_FFFFFF,t_70" alt="加粗样式"><br>MVC是一种程序开发设计模式,它实现了显示模块与功能模块的分离。提高了程序的可维护性、可移植性、可扩展性与可重用性，降低了程序的开发难度。它主要分模型、视图、控制器三层。<br>1、模型(model)它是应用程序的主体部分，主要包括业务逻辑模块（web项目中的Action,dao类）和数据模块（pojo类）。模型 与数据格式无关，这样一个模型能为多个视图提供数据。由于应用于模型的代码只需写一次就可以被多个视图重用，所以减少了代码的重复性<br>2、视图(view) 用户与之交互的界面、在web中视图一般由jsp,html组成<br>3、控制器(controller)接收来自界面的请求 并交给模型进行处理 在这个过程中控制器不做任何处理只是起到了一个连接的做用 </p><h5 id="二、MVC的优点"><a href="#二、MVC的优点" class="headerlink" title="二、MVC的优点"></a>二、MVC的优点</h5><p>1、可以为一个模型在运行时同时建立和使用多个视图。变化-传播机制可以确保所有相关的视图及时得到模型数据变化，从而使所有关联的视图和控制器做到行为同步。<br>2、视图与控制器的可接插性，允许更换视图和控制器对象，而且可以根据需求动态的打开或关闭、甚至在运行期间进行对象替换。<br>3、模型的可移植性。因为模型是独立于视图的，所以可以把一个模型独立地移植到新的平台工作。需要做的只是在新平台上对视图和控制器进行新的修改。<br>4、潜在的框架结构。可以基于此模型建立应用程序框架，不仅仅是用在设计界面的设计中。 </p><h5 id="三、MVC的不足之处"><a href="#三、MVC的不足之处" class="headerlink" title="三、MVC的不足之处"></a>三、MVC的不足之处</h5><p>1、增加了系统结构和实现的复杂性。对于简单的界面，严格遵循MVC，使模型、视图与控制器分离，会增加结构的复杂性，并可能产生过多的更新操作，降低运行效率。<br>2、视图与控制器间的过于紧密的连接。视图与控制器是相互分离，但确实联系紧密的部件，视图没有控制器的存在，其应用是很有限的，反之亦然，这样就妨碍了他们的独立重用。<br>3、视图对模型数据的低效率访问。依据模型操作接口的不同，视图可能需要多次调用才能获得足够的显示数据。对未变化数据的不必要的频繁访问，也将损害操作性能。<br>4、目前，一般高级的界面工具或构造器不支持模式。改造这些工具以适应MVC需要和建立分离的部件的代价是很高的，从而造成MVC使用的困难。 </p>]]></content>
      
      
      <categories>
          
          <category> MVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java面试】String中 + 的实现原理</title>
      <link href="/2018/01/22/java-mian-shi-string-zhong-de-shi-xian-yuan-li/"/>
      <url>/2018/01/22/java-mian-shi-string-zhong-de-shi-xian-yuan-li/</url>
      
        <content type="html"><![CDATA[<h5 id="说起String拼接，大家会想到几个对比："><a href="#说起String拼接，大家会想到几个对比：" class="headerlink" title="说起String拼接，大家会想到几个对比："></a>说起String拼接，大家会想到几个对比：</h5><p><strong>String</strong>：常量，不可变，不适合用来字符串拼接，每次都是新创建的对象，消耗较大。<br><strong>StringBuffer</strong>：适合用来作字符串拼接<br><strong>StringBuilder</strong>：JDK1.5引入，适合用来作字符串拼接，与StringBuffer区别是他不是线程安全的 </p><p>接下来进入正题String”+”拼接底层实现原理<br>曾见过这样一道题：</p><pre class="line-numbers language-java"><code class="language-java">String s<span class="token operator">=</span>null<span class="token punctuation">;</span>s<span class="token operator">=</span>s<span class="token operator">+</span><span class="token string">"abc"</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这道题答对结果的很少，我第一次也没有答对，后来是在编译器上运行之后才知道自己错了。<br>String拼接，有字符串变量参与时，中间会产生StringBuilder对象（JDK1.5之前产生StringBuffer）</p><h5 id="字符串拼接原理："><a href="#字符串拼接原理：" class="headerlink" title="字符串拼接原理："></a>字符串拼接原理：</h5><p>运行时， 两个字符串str1, str2的拼接首先会调用 String.valueOf(obj)，这个Obj为str1，而String.valueOf(Obj)中的实现是return obj == null ? “null” : obj.toString(), 然后产生StringBuilder， 调用的StringBuilder(str1)构造方法， 把StringBuilder初始化，长度为str1.length()+16，并且调用append(str1)！ 接下来调用StringBuilder.append(str2), 把第二个字符串拼接进去， 然后调用StringBuilder.toString返回结果！</p><h5 id="StringBuilder-str-底层调用"><a href="#StringBuilder-str-底层调用" class="headerlink" title="StringBuilder(str) 底层调用"></a>StringBuilder(str) 底层调用</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">StringBuilder</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">append</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="StringBuilder-toString-底层调用"><a href="#StringBuilder-toString-底层调用" class="headerlink" title="StringBuilder.toString 底层调用"></a>StringBuilder.toString 底层调用</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// Create a copy, don't share the array</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以答案就是：StringBuilder(“null”).append(“abc”).toString();</p>]]></content>
      
      
      <categories>
          
          <category> String </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础：super、final、static关键字的使用</title>
      <link href="/2018/01/22/java-ji-chu-super-final-static-guan-jian-zi-de-shi-yong/"/>
      <url>/2018/01/22/java-ji-chu-super-final-static-guan-jian-zi-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<h4 id="一、super"><a href="#一、super" class="headerlink" title="一、super"></a>一、super</h4><h5 id="1、介绍："><a href="#1、介绍：" class="headerlink" title="1、介绍："></a>1、介绍：</h5><p><strong>super</strong>关键字是为了调用父类的属性或方法！</p><h5 id="2、用法："><a href="#2、用法：" class="headerlink" title="2、用法："></a>2、用法：</h5><h5 id="1）表示父类属性"><a href="#1）表示父类属性" class="headerlink" title="1）表示父类属性"></a>1）表示父类属性</h5><p>使用：super.属性—明确表示从父类中调用属性</p><h5 id="2）表示父类方法"><a href="#2）表示父类方法" class="headerlink" title="2）表示父类方法"></a>2）表示父类方法</h5><h6 id="a-表示父类构造方法："><a href="#a-表示父类构造方法：" class="headerlink" title="a.表示父类构造方法："></a>a.表示父类构造方法：</h6><p><strong>无参构造：</strong> super( )，此时super( )可以省略。<br><strong>有参构造：</strong> super(方法参数);此时不能省略，且必须处于构造方法的首行。注：此时不存在this的构造器调用！</p><h6 id="b-表示父类被覆写的方法："><a href="#b-表示父类被覆写的方法：" class="headerlink" title="b.表示父类被覆写的方法："></a>b.表示父类被覆写的方法：</h6><p>super.方法名(参数); </p><p>案例：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> test<span class="token punctuation">.</span>aiti<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//公众号：挨踢小子</span><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> String name<span class="token operator">=</span><span class="token string">"佩奇"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我喜欢吃肉!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我喜欢吃!"</span><span class="token operator">+</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Pig</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">super</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//表示父类属性</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//表示父类方法</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我喜欢吃草!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//公众号：挨踢小子</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Pig pig <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Pig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pig<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pig<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token string">"面包"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>输出结果佩奇我喜欢吃肉<span class="token operator">!</span>我喜欢吃草<span class="token operator">!</span>我喜欢吃<span class="token operator">!</span>面包<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="二、final"><a href="#二、final" class="headerlink" title="二、final"></a>二、final</h4><p>用法：<strong>final</strong>关键字表示的不可变的。主要用于修饰：数据、方法、类。<br>借鉴：<a href="https://www.cnblogs.com/xiaoxiaoyihan/p/4974273.html" target="_blank" rel="noopener">https://www.cnblogs.com/xiaoxiaoyihan/p/4974273.html</a></p><h5 id="1、final数据"><a href="#1、final数据" class="headerlink" title="1、final数据"></a>1、final数据</h5><p> <strong>final属性：</strong></p><p><strong>基本数据：</strong> 这种常数必须是基本数据类型。前置关键字final声明。定义时必须提供一个值</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Aiti</span><span class="token punctuation">{</span>    <span class="token keyword">final</span> String name<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// name未初始化，编译出错</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>POJO:</strong> 引用地址不能改变，但是对象本身可以修改处理。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//公众号：挨踢小子</span><span class="token keyword">class</span> <span class="token class-name">Aiti</span><span class="token punctuation">{</span>    String name <span class="token operator">=</span> <span class="token string">"挨踢"</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> Aiti p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Aiti</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Aiti</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// Error:无法为最终变量p分配值</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是可以这样</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//公众号：挨踢小子</span><span class="token keyword">class</span> <span class="token class-name">Aiti</span><span class="token punctuation">{</span>    String name <span class="token operator">=</span> <span class="token string">"挨踢"</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> Aiti p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Aiti</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       p<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"挨踢小子"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>特殊情况：空白final，尽管被声明为final，但是却未得到一个初始值。即便如此，空白final还是必须在使用之前得到初始化</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//公众号：挨踢小子</span><span class="token keyword">class</span> <span class="token class-name">Aiti</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">final</span> Aiti p<span class="token punctuation">;</span>    <span class="token function">Demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Aiti</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">Demo</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        i <span class="token operator">=</span> x<span class="token punctuation">;</span>        p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Aiti</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Demo at<span class="token operator">=</span> <span class="token keyword">new</span>  <span class="token class-name">Demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="1、final方法"><a href="#1、final方法" class="headerlink" title="1、final方法"></a>1、final方法</h5><p><strong>final</strong>方法主要有两个方面的作用：<br>1、防止任何继承类覆盖方法。保证方法的行为在继承期间保持不变，不可被覆盖和改写。</p><p>2、提高程序执行的效率。将一个方法设成final后，编译器就会忽略为执行方法调用机制而采取的常规代码插入方法(将自变量压入堆栈；跳至方法代码并执行它；跳回来；清除堆栈自变量；最后对返回值进行处理)。它会用方法主体内实际代码的一个副本来替换方法调用。这样可以避免方法调用时的系统开销。若方法体太大，可能效率也得不到提升。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//公众号：挨踢小子</span><span class="token keyword">class</span> <span class="token class-name">Aiti</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//...</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">at</span> <span class="token keyword">extends</span> <span class="token class-name">Aiti</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">//Cannot override the final method from Aiti</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <strong>类内所有的private方法都自动成为final。由于不能访问一个private方法，所以它绝对不会被覆盖。</strong></p><h5 id="1、final类"><a href="#1、final类" class="headerlink" title="1、final类"></a>1、final类</h5><p><strong>将类定义成final后，结果只是禁止被继承。由于禁止了继承，所以一个final类中的所有方法都默认为final。</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//公众号：挨踢小子</span><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Aiti</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">at</span> <span class="token keyword">extends</span> <span class="token class-name">Aiti</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// The type at cannot subclass the final class Aiti</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="三、static"><a href="#三、static" class="headerlink" title="三、static"></a>三、static</h4><p>用法：<strong>static</strong> 主要有4中使用情况：成员变量、成员方法、代码块和内部类<br>功能：<strong>static</strong> 修饰的属性和方法永远只有独一份，和对象无关，static叫做类数据，和对象无关，非static叫对象，和类无关</p><h5 id="1、静态变量"><a href="#1、静态变量" class="headerlink" title="1、静态变量"></a>1、静态变量</h5><p><strong>静态变量：</strong> 只要静态变量所在的类被加载，这个静态变量就会被分配空间，因此就可以被使用了。对静态变量的引用有两种方式，分别是“<strong>类.静态变量</strong>“和”<strong>对象.静态变量</strong>“。</p><p><strong>实例变量：</strong> 实例变量属于对象，只有对象被创建后，实例变量才会被分配内存空间，才能被使用，它在内存中存在多个复制，只有用“<strong>对象.实例变量</strong>”的方式来引用</p><h5 id="2、静态方法"><a href="#2、静态方法" class="headerlink" title="2、静态方法"></a>2、静态方法</h5><p><strong>同理：</strong> <strong>static</strong>方法是类的方法，不需要创建对象就可以被调用，而非<strong>static</strong>方法是对象的方法，只有对象被创建出来后才可以被使用。<br><strong>注意：</strong> 静态方法只能访问静态成员（包括成员变量和成员方法），非静态方法可以访问静态也可以访问非静态，静态方法中不可以定义<strong>this</strong>，<strong>super</strong>关键字；因为静态优先于对象存在，所以静态方法中不可以出现<strong>this</strong>，<strong>super</strong>关键字。</p><h5 id="3、静态常量"><a href="#3、静态常量" class="headerlink" title="3、静态常量"></a>3、静态常量</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//公众号：挨踢小子</span><span class="token keyword">public</span> <span class="token keyword">static</span> String name<span class="token operator">=</span><span class="token string">"挨踢小子"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//静态变量</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String sex<span class="token operator">=</span><span class="token string">"男"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//静态常量</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4、静态代码块"><a href="#4、静态代码块" class="headerlink" title="4、静态代码块"></a>4、静态代码块</h5><p><strong>static</strong>修饰代码块在类加载时就会执行，且只会加载执行一次，之后不再执行。执行顺序：静态代码块–非静态代码块–构造方法。非静态代码块在每次实例化对象时都会执行一次。</p><p>案例：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> test<span class="token punctuation">.</span>aiti<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//公众号：挨踢小子</span><span class="token keyword">class</span> <span class="token class-name">Obj</span><span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token punctuation">{</span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"关注：挨踢小子"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Obj<span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">"003"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Obj<span class="token punctuation">.</span>sex<span class="token operator">+</span><span class="token string">"004"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> String name<span class="token operator">=</span><span class="token string">"挨踢小子"</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String sex<span class="token operator">=</span><span class="token string">"男"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"挨踢小子，666"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Obj<span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">"001"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Obj<span class="token punctuation">.</span>sex<span class="token operator">+</span><span class="token string">"002"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token punctuation">)</span>    <span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"++++++++++++++++++++++++++++++++"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Obj<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Obj<span class="token punctuation">.</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>输出结果挨踢小子，<span class="token number">666</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>关注：挨踢小子null003男<span class="token number">004</span>挨踢小子<span class="token number">001</span>男<span class="token number">002</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span>挨踢小子男<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>string字符串拼接应使用哪种方式比较好</title>
      <link href="/2018/01/22/string-zi-fu-chuan-pin-jie-ying-shi-yong-na-chong-fang-shi-bi-jiao-hao/"/>
      <url>/2018/01/22/string-zi-fu-chuan-pin-jie-ying-shi-yong-na-chong-fang-shi-bi-jiao-hao/</url>
      
        <content type="html"><![CDATA[<p>我们所知道的字符串String的拼接有： “+” 、 concat () 方式实现，或者使用StringBuilder、StringBuffer类实现。这几种方式性能的从低到高进行排序。</p><p><strong>性能排序：</strong><br>“+”  &lt;  concat ()  &lt; StringBuffer &lt; StringBuilder 。<strong>使用”+”性能是最差的，应该避免使用</strong>！！！</p><p>StringBuilder的性能是最高的，StringBuffer和StringBuilder的区别是：StringBuffer是线程安全的，而StringBuilder不是。在高并发的应用中，应该考虑使用StringBuffer! ！它们实现的接口都是一样的，只不过 StringBuffer的很多方法都加上了synchronized关键字修饰。 </p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** *  * @author 小钦 * */</span>   <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestString</span> <span class="token punctuation">{</span>       <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> num<span class="token operator">=</span><span class="token number">100000</span><span class="token punctuation">;</span>            <span class="token function">addTime</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">concatTime</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">stringBufferTime</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">stringBuilderTime</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">addTime</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token keyword">long</span> start<span class="token operator">=</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           String str<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                str<span class="token operator">+=</span>i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"字符串拼接使用 + 耗时："</span> <span class="token operator">+</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"ms"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">concatTime</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">long</span> start<span class="token operator">=</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      String str<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            str<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"字符串拼接使用 concat 耗时："</span> <span class="token operator">+</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"ms"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">stringBufferTime</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">long</span> start<span class="token operator">=</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      StringBuffer str<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            str<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"字符串拼接使用 StringBuffer 耗时："</span> <span class="token operator">+</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"ms"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">stringBuilderTime</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">long</span> start<span class="token operator">=</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      StringBuilder str<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            str<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"字符串拼接使用 StringBuilder 耗时："</span> <span class="token operator">+</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"ms"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="输出："><a href="#输出：" class="headerlink" title="输出："></a>输出：</h5><p>字符串拼接使用 + 耗时：20325ms<br>字符串拼接使用 concat 耗时：12ms<br>字符串拼接使用 StringBuffer 耗时：7ms<br>字符串拼接使用 StringBuilder 耗时：5ms </p>]]></content>
      
      
      <categories>
          
          <category> String </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是“堆”,&quot;栈&quot;,&quot;堆栈&quot;,&quot;队列&quot;,它们的区别</title>
      <link href="/2018/01/22/shi-me-shi-dui-zhan-dui-zhan-dui-lie-ta-men-de-qu-bie/"/>
      <url>/2018/01/22/shi-me-shi-dui-zhan-dui-zhan-dui-lie-ta-men-de-qu-bie/</url>
      
        <content type="html"><![CDATA[<p>如果你学过数据结构，就一定会遇到“堆”,”栈”,”堆栈”,”队列”，而最关键的是这些到底是什么意思？最关键的是即使你去面试，这些都还会问到，所以如果你不懂对你是损失很大的。</p><p>堆栈都是一种数据项按序排列的数据结构，只能在一端(称为栈顶(top))对数据项进行插入和删除。</p><p>要点：堆：顺序随意      栈：后进先出(Last-In/First-Out)</p><p><img src="https://img-blog.csdnimg.cn/20190910102122748.png" alt="在这里插入图片描述"></p><h6 id="堆：什么是堆？又该怎么理解呢？"><a href="#堆：什么是堆？又该怎么理解呢？" class="headerlink" title="堆：什么是堆？又该怎么理解呢？"></a>堆：什么是堆？又该怎么理解呢？</h6><p>①堆通常是一个可以被看做一棵树的数组对象。堆总是满足下列性质：堆中某个节点的值总是不大于或不小于其父节点的值；堆总是一棵完全二叉树。将根节点最大的堆叫做最大堆或大根堆，根节点最小的堆叫做最小堆或小根堆。常见的堆有二叉堆、斐波那契堆等。</p><p>②堆是在程序运行时，而不是在程序编译时，申请某个大小的内存空间。即动态分配内存，对其访问和对一般内存的访问没有区别。</p><p>③堆是应用程序在运行的时候请求操作系统分配给自己内存，一般是申请/给予的过程。</p><p>④堆是指程序运行时申请的动态内存，而栈只是指一种使用堆的方法(即先进后出)。</p><p><img src="https://img-blog.csdnimg.cn/20190910102207477.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3MTI2MzU3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h6 id="栈：什么是栈？又该怎么理解呢？"><a href="#栈：什么是栈？又该怎么理解呢？" class="headerlink" title="栈：什么是栈？又该怎么理解呢？"></a>栈：什么是栈？又该怎么理解呢？</h6><p>①栈（stack）又名堆栈，它是一种运算受限的线性表。其限制是仅允许在表的一端进行插入和删除运算。这一端被称为栈顶，相对地，把另一端称为栈底。</p><p>②栈就是一个桶，后放进去的先拿出来，它下面本来有的东西要等它出来之后才能出来（先进后出）</p><p>③栈(Stack)是操作系统在建立某个进程时或者线程（在支持多线程的操作系统中是线程）为这个线程建立的存储区域，该区域具有FIFO的特性，在编译的时候可以指定需要的Stack的大小。</p><p><img src="https://img-blog.csdnimg.cn/20190910102226190.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3MTI2MzU3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h6 id="堆栈：什么是堆栈？又该怎么理解呢？"><a href="#堆栈：什么是堆栈？又该怎么理解呢？" class="headerlink" title="堆栈：什么是堆栈？又该怎么理解呢？"></a>堆栈：什么是堆栈？又该怎么理解呢？</h6><p>注意：其实堆栈本身就是栈，只是换了个抽象的名字。</p><p>堆栈的特性： 最后一个放入堆栈中的物体总是被最先拿出来， 这个特性通常称为后进先出(LIFO)队列。 堆栈中定义了一些操作。 两个最重要的是PUSH和POP。 PUSH操作在堆栈的顶部加入一 个元素。POP操作相反， 在堆栈顶部移去一个元素， 并将堆栈的大小减一。<br><img src="https://img-blog.csdnimg.cn/20190910102248831.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3MTI2MzU3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h6 id="堆、栈区别总结："><a href="#堆、栈区别总结：" class="headerlink" title="堆、栈区别总结："></a>堆、栈区别总结：</h6><h6 id="1-堆栈空间分配"><a href="#1-堆栈空间分配" class="headerlink" title="1.堆栈空间分配"></a>1.堆栈空间分配</h6><p> ①栈（操作系统）：由操作系统自动分配释放 ，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈。</p><p> ②堆（操作系统）： 一般由程序员分配释放， 若程序员不释放，程序结束时可能由OS回收，分配方式倒是类似于链表。</p><h6 id="2-堆栈缓存方式"><a href="#2-堆栈缓存方式" class="headerlink" title="2.堆栈缓存方式"></a>2.堆栈缓存方式</h6><p>①栈使用的是一级缓存， 他们通常都是被调用时处于存储空间中，调用完毕立即释放。</p><p>②堆则是存放在二级缓存中，生命周期由虚拟机的垃圾回收算法来决定（并不是一旦成为孤儿对象就能被回收）。所以调用这些对象的速度要相对来得低一些。</p><h6 id="3-堆栈数据结构区别"><a href="#3-堆栈数据结构区别" class="headerlink" title="3.堆栈数据结构区别"></a>3.堆栈数据结构区别</h6><p>①堆（数据结构）：堆可以被看成是一棵树，如：堆排序。</p><p>②栈（数据结构）：一种先进后出的数据结构。</p><p><img src="https://img-blog.csdnimg.cn/2019091010231822.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3MTI2MzU3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h6 id="队列：什么是队列？又该怎么理解呢？"><a href="#队列：什么是队列？又该怎么理解呢？" class="headerlink" title="队列：什么是队列？又该怎么理解呢？"></a>队列：什么是队列？又该怎么理解呢？</h6><p>①队列是一种特殊的线性表，特殊之处在于它只允许在表的前端（front）进行删除操作，而在表的后端（rear）进行插入操作，和栈一样，队列是一种操作受限制的线性表。进行插入操作的端称为队尾，进行删除操作的端称为队头。</p><p>②队列中没有元素时，称为空队列。</p><p>③建立顺序队列结构必须为其静态分配或动态申请一片连续的存储空间，并设置两个指针进行管理。一个是队头指针front，它指向队头元素；另一个是队尾指针rear，它指向下一个入队元素的存储位置。</p><p>④队列采用的FIFO(first in first out)，新元素（等待进入队列的元素）总是被插入到链表的尾部，而读取的时候总是从链表的头部开始读取。每次读取一个元素，释放一个元素。所谓的动态创建，动态释放。因而也不存在溢出等问题。由于链表由结构体间接而成，遍历也方便。（先进先出）<br><img src="https://img-blog.csdnimg.cn/20190910102335862.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3MTI2MzU3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h6 id="堆、栈、队列之间的区别是？"><a href="#堆、栈、队列之间的区别是？" class="headerlink" title="堆、栈、队列之间的区别是？"></a>堆、栈、队列之间的区别是？</h6><p>①堆是在程序运行时，而不是在程序编译时，申请某个大小的内存空间。即动态分配内存，对其访问和对一般内存的访问没有区别。</p><p>②栈就是一个桶，后放进去的先拿出来，它下面本来有的东西要等它出来之后才能出来。（后进先出）</p><p>③队列只能在队头做删除操作,在队尾做插入操作.而栈只能在栈顶做插入和删除操作。（先进先出）</p><p><img src="https://img-blog.csdnimg.cn/20190910102358625.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3MTI2MzU3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20190910102405426.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3MTI2MzU3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HashMap（常用方法、底层结构、扩容机制）</title>
      <link href="/2018/01/22/hashmap-chang-yong-fang-fa-di-ceng-jie-gou-kuo-rong-ji-zhi/"/>
      <url>/2018/01/22/hashmap-chang-yong-fang-fa-di-ceng-jie-gou-kuo-rong-ji-zhi/</url>
      
        <content type="html"><![CDATA[<h6 id="1-实现原理："><a href="#1-实现原理：" class="headerlink" title="1.实现原理："></a>1.实现原理：</h6><p>*HashMap的底层实现是一个哈希表即数组+链表；</p><p>*HashMap初始容量大小16，扩容因子为0.75，扩容倍数为2；</p><p>HashMap本质是一个一定长度的数组，数组中存放的是链表。<br><img src="https://img-blog.csdnimg.cn/20190910095846460.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3MTI2MzU3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>当向HashMap中put(key,value)时，会首先通过hash算法计算出存放到数组中的位置，比如位置索引为i，将其放入到Entry[i]中，如果这个位置上面已经有元素了，那么就将新加入的元素放在链表的头上，最先加入的元素在链表尾。比如，第一个键值对A进来，通过计算其key的hash得到的index=0，记做:Entry[0] = A。一会后又进来一个键值对B，通过计算其index也等于0，现在怎么办？HashMap会这样做:B.next = A,Entry[0] = B,如果又进来C,index也等于0,那么C.next = B,Entry[0] = C；这样我们发现index=0的地方其实存取了A,B,C三个键值对,他们通过next这个属性链接在一起,也就是说数组中存储的是最后插入的元素。 </p><p><img src="https://img-blog.csdnimg.cn/20190910095906625.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3MTI2MzU3,size_8,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>HashMap的get(key)方法是：首先计算key的hashcode，找到数组中对应位置的某一元素，然后通过key的equals方法在对应位置的链表中找到需要的元素。从这里我们可以想象得到，如果每个位置上的链表只有一个元素，那么hashmap的get效率将是最高的。所以我们需要让这个hash算法尽可能的将元素平均的放在数组中每个位置上。 </p><h6 id="2-扩容机制："><a href="#2-扩容机制：" class="headerlink" title="2.扩容机制："></a>2.扩容机制：</h6><p>当HashMap中的元素越来越多的时候，hash冲突的几率也就越来越高，因为数组的长度是固定的。所以为了提高查询的效率，就要对HashMap的数组进行扩容。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DEFAULT_INITIAL_CAPACITY <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// HashMap初始容量大小(16) </span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MAXIMUM_CAPACITY <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">30</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// HashMap最大容量</span><span class="token keyword">transient</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>                                       <span class="token comment" spellcheck="true">// The number of key-value mappings contained in this map</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">float</span> DEFAULT_LOAD_FACTOR <span class="token operator">=</span> <span class="token number">0.75f</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 负载因子</span>HashMap的容量size乘以负载因子<span class="token punctuation">[</span>默认<span class="token number">0.75</span><span class="token punctuation">]</span> <span class="token operator">=</span> threshold<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// threshold即为开始扩容的临界值</span><span class="token keyword">transient</span> Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> table <span class="token operator">=</span> <span class="token punctuation">(</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> EMPTY_TABLE<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// HashMap的基本构成Entry数组</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当HashMap中的元素个数超过数组大小(数组总大小length,不是数组中个数size)<em>loadFactor时，就会进行数组扩容，loadFactor的默认值为0.75，这是一个折中的取值。也就是说，默认情况下，数组大小为16，那么当HashMap中元素个数超过16</em>0.75=12（这个值就是代码中的threshold值，也叫做临界值）的时候，就把数组的大小扩展为 2*16=32，即扩大一倍，然后重新计算每个元素在数组中的位置。</p><p>0.75这个值成为负载因子，那么为什么负载因子为0.75呢？这是通过大量实验统计得出来的，如果过小，比如0.5，那么当存放的元素超过一半时就进行扩容，会造成资源的浪费；如果过大，比如1，那么当元素满的时候才进行扩容，会使get,put操作的碰撞几率增加。<br>HashMap中扩容是调用resize()方法，方法源码： </p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token keyword">int</span> newCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Entry<span class="token punctuation">[</span><span class="token punctuation">]</span> oldTable <span class="token operator">=</span> table<span class="token punctuation">;</span>    <span class="token keyword">int</span> oldCapacity <span class="token operator">=</span> oldTable<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//如果当前的数组长度已经达到最大值，则不在进行调整</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldCapacity <span class="token operator">==</span> MAXIMUM_CAPACITY<span class="token punctuation">)</span> <span class="token punctuation">{</span>        threshold <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//根据传入参数的长度定义新的数组</span>    Entry<span class="token punctuation">[</span><span class="token punctuation">]</span> newTable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Entry</span><span class="token punctuation">[</span>newCapacity<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//按照新的规则，将旧数组中的元素转移到新数组中</span>    <span class="token function">transfer</span><span class="token punctuation">(</span>newTable<span class="token punctuation">)</span><span class="token punctuation">;</span>    table <span class="token operator">=</span> newTable<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//更新临界值</span>    threshold <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>newCapacity <span class="token operator">*</span> loadFactor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//旧数组中元素往新数组中迁移</span><span class="token keyword">void</span> <span class="token function">transfer</span><span class="token punctuation">(</span>Entry<span class="token punctuation">[</span><span class="token punctuation">]</span> newTable<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//旧数组</span>    Entry<span class="token punctuation">[</span><span class="token punctuation">]</span> src <span class="token operator">=</span> table<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//新数组长度</span>    <span class="token keyword">int</span> newCapacity <span class="token operator">=</span> newTable<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//遍历旧数组</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> src<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e <span class="token operator">=</span> src<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            src<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token keyword">do</span> <span class="token punctuation">{</span>                Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> next <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">indexFor</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash<span class="token punctuation">,</span> newCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//放在新数组中的index位置</span>                e<span class="token punctuation">.</span>next <span class="token operator">=</span> newTable<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//实现链表结构，新加入的放在链头，之前的的数据放在链尾</span>                newTable<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>                e <span class="token operator">=</span> next<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到HashMap不是无限扩容的，当达到了实现预定的MAXIMUM_CAPACITY，就不再进行扩容。</p><h6 id="3-Hashmap为什么大小是2的幂次？"><a href="#3-Hashmap为什么大小是2的幂次？" class="headerlink" title="3.Hashmap为什么大小是2的幂次？"></a>3.Hashmap为什么大小是2的幂次？</h6><p>因为在计算元素该存放的位置的时候，用到的算法是将元素的hashcode与当前map长度-1进行与运算。源码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">indexFor</span><span class="token punctuation">(</span><span class="token keyword">int</span> h<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// assert Integer.bitCount(length) == 1 : "length must be a non-zero power of 2";</span>    <span class="token keyword">return</span> h <span class="token operator">&amp;</span> <span class="token punctuation">(</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果map长度为2的幂次，那长度-1的二进制一定为11111…这种形式，进行与运算就看元素的hashcode，但是如果map的长度不是2的幂次，比如为15，那长度-1就是14，二进制为1110，无论与谁相与最后一位一定是0，0001，0011，0101，1001，1011，0111，1101这几个位置就永远都不能存放元素了，空间浪费相当大。也增加了添加元素是发生碰撞的机会。减慢了查询效率。所以Hashmap的大小是2的幂次。 </p><h6 id="4-get方法实现"><a href="#4-get方法实现" class="headerlink" title="4.get方法实现"></a>4.get方法实现</h6><p>Hashmap get一个元素是，是计算出key的hashcode找到对应的entry，这个时间复杂度为O(1)，然后通过对entry中存放的元素key进行equal比较，找出元素，这个的时间复杂度为O(m)，m为entry的长度。</p>]]></content>
      
      
      <categories>
          
          <category> HashMap </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>挨踢小子MySQL筆記手冊整理</title>
      <link href="/2018/01/22/ai-ti-xiao-zi-mysql-ji-ben-cao-zuo-shou-ce/"/>
      <url>/2018/01/22/ai-ti-xiao-zi-mysql-ji-ben-cao-zuo-shou-ce/</url>
      
        <content type="html"><![CDATA[<h4 id="一、库操作"><a href="#一、库操作" class="headerlink" title="一、库操作"></a>一、库操作</h4><p>查看：</p><pre><code>-- 展示所有数据库SHOW DATABASES;-- 查看表结构desc table_name;-- 查看生成表的SQLshow create table table_name;</code></pre><p>创建：</p><pre><code>//创建数据库涉及字符集、排序规则知识，后续介绍CREATE DATABASE 数据库名;CREATE DATABASE IF NOT EXISTS 数据库名 DEFAULT CHARSET utf8 COLLATE utf8_general_ci;</code></pre><p>使用：</p><pre><code>USE 数据库名;注意：使用之后不能对其他数据库以及其他的数据中的数据表操作，只能对自身数据库操作提示：可以使用 SHOW DATABASES 返回到根目录下 进行对其他数据库的操作</code></pre><p>删除：</p><pre><code>DROP DATABASE 数据库名;</code></pre><h4 id="二、表操作"><a href="#二、表操作" class="headerlink" title="二、表操作"></a>二、表操作</h4><p>查看：</p><pre><code>//查看当前数据库下所有表名show tables;//查看表所有内容select * from 表名;             </code></pre><p>创建：</p><pre><code>命令：CREATE TABLE table_name (column_name column_type);案例：CREATE TABLE `sys_role` (  `role_id` int(11) NOT NULL AUTO_INCREMENT COMMENT &#39;角色ID&#39;,  `role_name` varchar(30) NOT NULL COMMENT &#39;角色名称&#39;,  `role_key` varchar(100) NOT NULL COMMENT &#39;角色权限字符串&#39;,  `role_sort` int(4) NOT NULL COMMENT &#39;显示顺序&#39;,  `data_scope` char(1) DEFAULT &#39;1&#39; COMMENT &#39;数据范围（1：全部数据权限 2：自定数据权限）&#39;,  `status` char(1) NOT NULL COMMENT &#39;角色状态（0正常 1停用）&#39;,  `del_flag` char(1) DEFAULT &#39;0&#39; COMMENT &#39;删除标志（0代表存在 2代表删除）&#39;,  `create_by` varchar(64) DEFAULT &#39;&#39; COMMENT &#39;创建者&#39;,  `create_time` datetime DEFAULT NULL COMMENT &#39;创建时间&#39;,  `update_by` varchar(64) DEFAULT &#39;&#39; COMMENT &#39;更新者&#39;,  `update_time` datetime DEFAULT NULL COMMENT &#39;更新时间&#39;,  `remark` varchar(500) DEFAULT NULL COMMENT &#39;备注&#39;,  PRIMARY KEY (`role_id`)) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8 COMMENT=&#39;角色信息表&#39;;</code></pre><p>删除：</p><pre><code>// 删除内容和定义，释放空间。简单来说就是把整个表去掉.以后要新增数据是不可能的,除非新增一个表。drop table 表名</code></pre><p>清空：</p><pre><code>//删除内容、释放空间但不删除定义，也就是数据表的结构还在。与drop不同的是,它只是清空表数据而已,它比较温柔。truncate table 表名//删除内容不删除定义，不释放空间。其中，delete table tb 虽然也是删除整个表的数据,但是过程是痛苦的(系统一行一行地删,效率较truncate低)。delete from 表名</code></pre><p>修改：</p><pre><code>添加列：   alter table 表名 add 列名 类型删除列：   alter table 表名 drop column 列名修改列：alter table 表名 modify column 列名 类型;  -- 类型alter table 表名 change 原列名 新列名 类型; -- 列名，类型</code></pre><h4 id="三、表内容操作"><a href="#三、表内容操作" class="headerlink" title="三、表内容操作"></a>三、表内容操作</h4><p>增加：</p><pre><code>命令:insert into 表 (列名,列名...) values (值,值,...)insert into 表 (列名,列名...) values (值,值,...),(值,值,值...)insert into 表 (列名,列名...) select (列名,列名...) from 表案例：insert into tab1(name,email) values(&#39;Aiti&#39;,&#39;aitixiaozi@163.com&#39;)</code></pre><p>删除：</p><pre><code>delete from 表                                      # 删除表里全部数据delete from 表 where id＝1 and name＝&#39;Aiti&#39;   # 删除ID =1 和name=&#39;Aiti&#39; 那一行数据</code></pre><p>修改：</p><pre><code>update 表 set name ＝ &#39;Aiti&#39; where id&gt;1</code></pre><p>查看：</p><pre><code>select * from 表select * from 表 where id &gt; 1select id,name,sex from 表 where id &gt; 1</code></pre><h4 id="四、复合条件语句"><a href="#四、复合条件语句" class="headerlink" title="四、复合条件语句"></a>四、复合条件语句</h4><p>1、条件判断where</p><pre><code>select * from 表 where id &gt; 1 and name != &#39;Aiti&#39; and num = 10;select * from 表 where id between 10 and 200;select * from 表 where id in (100,200,300)select * from 表 where id not in (100,200,300)select * from 表 where id in (select uid from 表)</code></pre><p>2、通配符like</p><pre><code>// Liu开头的所有（多个字符串）select * from 表 where name like &#39;Liu%&#39;  // Liu开头的所有（一个字符）select * from 表 where name like &#39;Liu_&#39; </code></pre><p>3、限制limit</p><pre><code>select * from 表 limit 5;             - 前5行select * from 表 limit 10,5;          - 从第10行开始的5行select * from 表 limit 5 offset 10    - 从第10行开始的5行</code></pre><p>4、排序asc，desc</p><pre><code>select * from 表 order by 列 asc              - 根据 “列” 从小到大排列select * from 表 order by 列 desc             - 根据 “列” 从大到小排列select * from 表 order by 列1 desc,列2 asc    - 根据 “列1” 从大到小排列，如果相同则按列2从小到大排序</code></pre><p>5、分组group by</p><pre><code>select num from 表 group by numselect num,id from 表 group by num,idselect num,id from 表  where id &gt; 50 group by num,id order id descselect num,id,count(*),sum(score),max(score),min(score) from 表 group by num,idselect num from 表 group by num having max(id) &gt; 50// 注意：group by 必须在where之后，order by之前。// WHERE 搜索条件在进行分组操作之前应用；而 HAVING 搜索条件在进行分组操作之后应用。</code></pre>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 筆記 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java面试】String中 + 的实现原理</title>
      <link href="/2018/01/22/ai-ti-xiao-zi-mysql-hong-fa-qi-jie-shao-chuang-jian-cha-kan-shan-chu-fu-ben-6/"/>
      <url>/2018/01/22/ai-ti-xiao-zi-mysql-hong-fa-qi-jie-shao-chuang-jian-cha-kan-shan-chu-fu-ben-6/</url>
      
        <content type="html"><![CDATA[<h5 id="说起String拼接，大家会想到几个对比："><a href="#说起String拼接，大家会想到几个对比：" class="headerlink" title="说起String拼接，大家会想到几个对比："></a>说起String拼接，大家会想到几个对比：</h5><p><strong>String</strong>：常量，不可变，不适合用来字符串拼接，每次都是新创建的对象，消耗较大。<br><strong>StringBuffer</strong>：适合用来作字符串拼接<br><strong>StringBuilder</strong>：JDK1.5引入，适合用来作字符串拼接，与StringBuffer区别是他不是线程安全的 </p><p>接下来进入正题String”+”拼接底层实现原理<br>曾见过这样一道题：</p><pre class="line-numbers language-java"><code class="language-java">String s<span class="token operator">=</span>null<span class="token punctuation">;</span>s<span class="token operator">=</span>s<span class="token operator">+</span><span class="token string">"abc"</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这道题答对结果的很少，我第一次也没有答对，后来是在编译器上运行之后才知道自己错了。<br>String拼接，有字符串变量参与时，中间会产生StringBuilder对象（JDK1.5之前产生StringBuffer）</p><h5 id="字符串拼接原理："><a href="#字符串拼接原理：" class="headerlink" title="字符串拼接原理："></a>字符串拼接原理：</h5><p>运行时， 两个字符串str1, str2的拼接首先会调用 String.valueOf(obj)，这个Obj为str1，而String.valueOf(Obj)中的实现是return obj == null ? “null” : obj.toString(), 然后产生StringBuilder， 调用的StringBuilder(str1)构造方法， 把StringBuilder初始化，长度为str1.length()+16，并且调用append(str1)！ 接下来调用StringBuilder.append(str2), 把第二个字符串拼接进去， 然后调用StringBuilder.toString返回结果！</p><h5 id="StringBuilder-str-底层调用"><a href="#StringBuilder-str-底层调用" class="headerlink" title="StringBuilder(str) 底层调用"></a>StringBuilder(str) 底层调用</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">StringBuilder</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">append</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="StringBuilder-toString-底层调用"><a href="#StringBuilder-toString-底层调用" class="headerlink" title="StringBuilder.toString 底层调用"></a>StringBuilder.toString 底层调用</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// Create a copy, don't share the array</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以答案就是：StringBuilder(“null”).append(“abc”).toString();</p>]]></content>
      
      
      <categories>
          
          <category> String </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MVC原理和MVC模式的优缺点</title>
      <link href="/2018/01/22/ai-ti-xiao-zi-mysql-hong-fa-qi-jie-shao-chuang-jian-cha-kan-shan-chu-fu-ben-7/"/>
      <url>/2018/01/22/ai-ti-xiao-zi-mysql-hong-fa-qi-jie-shao-chuang-jian-cha-kan-shan-chu-fu-ben-7/</url>
      
        <content type="html"><![CDATA[<h5 id="一、MVC原理"><a href="#一、MVC原理" class="headerlink" title="一、MVC原理"></a>一、MVC原理</h5><p><img src="https://img-blog.csdnimg.cn/20190904110106736.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3MTI2MzU3,size_16,color_FFFFFF,t_70" alt="加粗样式"><br>MVC是一种程序开发设计模式,它实现了显示模块与功能模块的分离。提高了程序的可维护性、可移植性、可扩展性与可重用性，降低了程序的开发难度。它主要分模型、视图、控制器三层。<br>1、模型(model)它是应用程序的主体部分，主要包括业务逻辑模块（web项目中的Action,dao类）和数据模块（pojo类）。模型 与数据格式无关，这样一个模型能为多个视图提供数据。由于应用于模型的代码只需写一次就可以被多个视图重用，所以减少了代码的重复性<br>2、视图(view) 用户与之交互的界面、在web中视图一般由jsp,html组成<br>3、控制器(controller)接收来自界面的请求 并交给模型进行处理 在这个过程中控制器不做任何处理只是起到了一个连接的做用 </p><h5 id="二、MVC的优点"><a href="#二、MVC的优点" class="headerlink" title="二、MVC的优点"></a>二、MVC的优点</h5><p>1、可以为一个模型在运行时同时建立和使用多个视图。变化-传播机制可以确保所有相关的视图及时得到模型数据变化，从而使所有关联的视图和控制器做到行为同步。<br>2、视图与控制器的可接插性，允许更换视图和控制器对象，而且可以根据需求动态的打开或关闭、甚至在运行期间进行对象替换。<br>3、模型的可移植性。因为模型是独立于视图的，所以可以把一个模型独立地移植到新的平台工作。需要做的只是在新平台上对视图和控制器进行新的修改。<br>4、潜在的框架结构。可以基于此模型建立应用程序框架，不仅仅是用在设计界面的设计中。 </p><h5 id="三、MVC的不足之处"><a href="#三、MVC的不足之处" class="headerlink" title="三、MVC的不足之处"></a>三、MVC的不足之处</h5><p>1、增加了系统结构和实现的复杂性。对于简单的界面，严格遵循MVC，使模型、视图与控制器分离，会增加结构的复杂性，并可能产生过多的更新操作，降低运行效率。<br>2、视图与控制器间的过于紧密的连接。视图与控制器是相互分离，但确实联系紧密的部件，视图没有控制器的存在，其应用是很有限的，反之亦然，这样就妨碍了他们的独立重用。<br>3、视图对模型数据的低效率访问。依据模型操作接口的不同，视图可能需要多次调用才能获得足够的显示数据。对未变化数据的不必要的频繁访问，也将损害操作性能。<br>4、目前，一般高级的界面工具或构造器不支持模式。改造这些工具以适应MVC需要和建立分离的部件的代价是很高的，从而造成MVC使用的困难。 </p>]]></content>
      
      
      <categories>
          
          <category> MVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>挨踢小子MySQL数据字典源码</title>
      <link href="/2018/01/22/ai-ti-xiao-zi-mysql-hong-fa-qi-jie-shao-chuang-jian-cha-kan-shan-chu-fu-ben/"/>
      <url>/2018/01/22/ai-ti-xiao-zi-mysql-hong-fa-qi-jie-shao-chuang-jian-cha-kan-shan-chu-fu-ben/</url>
      
        <content type="html"><![CDATA[<blockquote><p>该工具由挨踢小子独家原创，以提高开发效率为目的，连接MySQL数据库，实时监测数据变化动态，供梳理需求和查询表结构字段。工具由PHP开发，适用于PHP运行环境之下。 </p></blockquote><h5 id="效果演示："><a href="#效果演示：" class="headerlink" title="效果演示："></a>效果演示：</h5><p><img src="https://img-blog.csdnimg.cn/20190821151932608.gif" alt="在这里插入图片描述"></p><h5 id="源码展示"><a href="#源码展示" class="headerlink" title="源码展示"></a>源码展示</h5><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token doctype">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/1999/xhtml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span></span>挨踢小子数据字典<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span></span><span class="token operator">*</span><span class="token punctuation">{</span>margin<span class="token punctuation">:</span>0px<span class="token punctuation">;</span>padding<span class="token punctuation">:</span>0px<span class="token punctuation">;</span>font<span class="token operator">-</span>size<span class="token punctuation">:</span>14px<span class="token punctuation">;</span><span class="token punctuation">}</span> h3<span class="token punctuation">{</span>line<span class="token operator">-</span>height<span class="token punctuation">:</span>50px<span class="token punctuation">;</span>text<span class="token operator">-</span>align<span class="token punctuation">:</span>center<span class="token punctuation">;</span>font<span class="token operator">-</span>size<span class="token punctuation">:</span>30px<span class="token punctuation">;</span>color<span class="token punctuation">:</span> <span class="token shell-comment comment">#800000;}</span><span class="token punctuation">.</span>boxtab<span class="token punctuation">{</span>width<span class="token punctuation">:</span><span class="token number">60</span><span class="token operator">%</span><span class="token punctuation">;</span> min<span class="token operator">-</span>width<span class="token punctuation">:</span>300px<span class="token punctuation">;</span>margin<span class="token punctuation">:</span>0px auto<span class="token punctuation">;</span>background<span class="token punctuation">:</span> <span class="token shell-comment comment">#F5F5DC;}</span><span class="token punctuation">.</span>search<span class="token operator">-</span>form<span class="token punctuation">{</span>width<span class="token punctuation">:</span> <span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">;</span>padding<span class="token punctuation">:</span> 10px 0px<span class="token punctuation">;</span> text<span class="token operator">-</span>align<span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span>myform <span class="token operator">></span>input<span class="token punctuation">{</span>width<span class="token punctuation">:</span><span class="token number">12</span><span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">.</span>myform <span class="token operator">></span>label<span class="token punctuation">{</span>font<span class="token operator">-</span>weight<span class="token punctuation">:</span> bolder<span class="token punctuation">;</span><span class="token punctuation">}</span>h2<span class="token punctuation">{</span>line<span class="token operator">-</span>height<span class="token punctuation">:</span>50px<span class="token punctuation">;</span>text<span class="token operator">-</span>align<span class="token punctuation">:</span>center<span class="token punctuation">;</span>font<span class="token operator">-</span>size<span class="token punctuation">:</span>20px<span class="token punctuation">;</span>line<span class="token operator">-</span>height<span class="token punctuation">:</span>35px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span>tab th<span class="token punctuation">{</span>background<span class="token punctuation">:</span> <span class="token shell-comment comment">#3F3F3F; padding: 5px;color:#FFF; line-height:25px;}</span><span class="token punctuation">.</span>tab tr td<span class="token punctuation">{</span>border<span class="token punctuation">:</span> 1px solid <span class="token shell-comment comment">#aaa;border-collapse: collapse;    line-height:30px;}</span><span class="token punctuation">.</span>zilist<span class="token punctuation">{</span>position<span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>left<span class="token punctuation">:</span> 6px<span class="token punctuation">;</span>top<span class="token punctuation">:</span><span class="token number">10</span><span class="token operator">%</span><span class="token punctuation">;</span>background<span class="token punctuation">:</span> <span class="token shell-comment comment">#F5F5DC;border: 1px solid #DCDCDC;padding: 10px 6px 6px 10px;    width: 16%; max-height:80% ;overflow:auto;}</span><span class="token punctuation">.</span>zilist a<span class="token punctuation">{</span>display<span class="token punctuation">:</span>block<span class="token punctuation">;</span>line<span class="token operator">-</span>height<span class="token punctuation">:</span>35px<span class="token punctuation">;</span>font<span class="token operator">-</span>size<span class="token punctuation">:</span>14px<span class="token punctuation">;</span>color<span class="token punctuation">:</span><span class="token shell-comment comment">#333;text-decoration: none;float: left;width: 48%;height:35px;overflow:hidden;text-align: center;border-bottom: 1px solid #aaa;}</span><span class="token punctuation">.</span>zilist a<span class="token punctuation">:</span>hover<span class="token punctuation">{</span>color<span class="token punctuation">:</span><span class="token shell-comment comment">#3F3F3F;font-weight: bolder;}</span><span class="token punctuation">.</span>zilist a<span class="token punctuation">:</span>nth<span class="token operator">-</span><span class="token function">child</span><span class="token punctuation">(</span>odd<span class="token punctuation">)</span><span class="token punctuation">{</span>border<span class="token operator">-</span>right<span class="token punctuation">:</span> 1px solid <span class="token shell-comment comment">#aaa;} </span>td <span class="token punctuation">{</span>padding<span class="token punctuation">:</span> 3px 5px 3px 10px<span class="token punctuation">;</span>vertical<span class="token operator">-</span>align<span class="token punctuation">:</span> top<span class="token punctuation">;</span>overflow<span class="token punctuation">:</span>hidden<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span>tab tr<span class="token punctuation">:</span>nth<span class="token operator">-</span><span class="token function">child</span><span class="token punctuation">(</span>odd<span class="token punctuation">)</span><span class="token punctuation">{</span>background<span class="token punctuation">:</span><span class="token shell-comment comment">#F5F5F5;}</span><span class="token punctuation">.</span>tab tr<span class="token punctuation">:</span>hover<span class="token punctuation">{</span>background<span class="token punctuation">:</span><span class="token shell-comment comment">#D2B48C;}</span><span class="token punctuation">.</span>colu<span class="token punctuation">{</span> max<span class="token operator">-</span>width<span class="token punctuation">:</span>150px<span class="token punctuation">}</span><span class="token punctuation">.</span>tab<span class="token punctuation">{</span>width<span class="token punctuation">:</span><span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">;</span>border<span class="token punctuation">:</span> 1px solid <span class="token shell-comment comment">#aaa;  border-collapse: collapse;}</span><span class="token punctuation">.</span>cor<span class="token punctuation">{</span>line<span class="token operator">-</span>height<span class="token punctuation">:</span>30px<span class="token punctuation">;</span>text<span class="token operator">-</span>align<span class="token punctuation">:</span>center<span class="token punctuation">;</span>color<span class="token punctuation">:</span> <span class="token shell-comment comment">#fff;background: #3F3F3F;position: fixed;bottom: 0; width: 60%;}</span><span class="token punctuation">.</span>footer<span class="token punctuation">{</span> height<span class="token punctuation">:</span>80px<span class="token punctuation">;</span>text<span class="token operator">-</span>align<span class="token punctuation">:</span>center<span class="token punctuation">;</span>width<span class="token punctuation">:</span> <span class="token number">60</span><span class="token operator">%</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span>menu a<span class="token punctuation">{</span>float<span class="token punctuation">:</span>right<span class="token punctuation">;</span>background<span class="token punctuation">:</span><span class="token shell-comment comment">#F5F5DC;font-weight: bolder;text-decoration: none;color:#B22222;border:0px;border-radius:5%;margin-left: 50px;}</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>boxtab<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>menu<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>   <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span></span>挨踢小子数据字典连接工具<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span></span>     <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>search-form<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>        <span class="token markup">&lt;form  class="myform"  name="myform" action="<span class="token prolog">&lt;?php echo $_SERVER['PHP_SELF'];?></span></span><span class="token string">" method="</span>post"<span class="token operator">></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span></span><span class="token constant">IP</span>地址：<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>host<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>host<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>127.0.0.1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></span>       <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span></span>数据库：<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>db<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>db<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mysql<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></span>       <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span></span>账户：<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>db_user<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>db_user<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></span>       <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span></span>密码：<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>db_pwd<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>db_pwd<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>123456<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>提交<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></span>      <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>     <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>downloadInfo(this)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>导出表格<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span> <span class="token delimiter">&lt;?php</span> <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Content-type: text/html; charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">date_default_timezone_set</span><span class="token punctuation">(</span><span class="token string">"PRC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** * @project: 挨踢小子数据字典详细说明 * @desc: 该文件应该放置于php运行环境之下，并配置下面的数据库。在建表过程中需要注意数据表注释，数据字段注释 * @author: Aiti  */</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'submit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"host"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"db"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"db_user"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"db_pwd"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$host</span><span class="token operator">=</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"host"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$db</span><span class="token operator">=</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"db"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$db_user</span><span class="token operator">=</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"db_user"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$db_pwd</span><span class="token operator">=</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"db_pwd"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token variable">$_SESSION</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;script>document.getElementById('host').value = '"</span><span class="token punctuation">.</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'host'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>"'<span class="token punctuation">;</span>                  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'db'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value <span class="token operator">=</span><span class="token string">'".$_SESSION['</span>db<span class="token string">']."'</span><span class="token punctuation">;</span>                  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'db_user'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value <span class="token operator">=</span><span class="token string">'".$_SESSION['</span>db_user<span class="token string">']."'</span><span class="token punctuation">;</span>                  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'db_pwd'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value <span class="token operator">=</span><span class="token string">'".$_SESSION['</span>db_pwd<span class="token string">']."'</span><span class="token punctuation">;</span>                  <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span>"<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>         <span class="token keyword">echo</span> <span class="token string">"&lt;script>alert('输入有误，请重新输入');&lt;/script>"</span><span class="token punctuation">;</span>        exit<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token variable">$mysql_conf</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>    <span class="token string">'host'</span>    <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$host</span><span class="token punctuation">,</span>    <span class="token string">'db'</span>      <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$db</span><span class="token punctuation">,</span>       <span class="token comment" spellcheck="true">//库名</span>    <span class="token string">'db_user'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$db_user</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//用户名</span>    <span class="token string">'db_pwd'</span>  <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$db_pwd</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//密码</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$mysqli</span> <span class="token operator">=</span> @<span class="token keyword">new</span> <span class="token class-name">mysqli</span><span class="token punctuation">(</span><span class="token variable">$mysql_conf</span><span class="token punctuation">[</span><span class="token string">'host'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$mysql_conf</span><span class="token punctuation">[</span><span class="token string">'db_user'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$mysql_conf</span><span class="token punctuation">[</span><span class="token string">'db_pwd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$mysqli</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">connect_errno</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//弹框问题说明</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;script>alert('输入有误，请重新输入');&lt;/script>"</span><span class="token punctuation">;</span>     <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"could not connect to the database:\n"</span> <span class="token punctuation">.</span> <span class="token variable">$mysqli</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">connect_error</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//诊断连接错误</span><span class="token punctuation">}</span><span class="token variable">$mysqli</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">"set names 'utf8';"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//编码转化</span><span class="token variable">$select_db</span> <span class="token operator">=</span> <span class="token variable">$mysqli</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">select_db</span><span class="token punctuation">(</span><span class="token variable">$mysql_conf</span><span class="token punctuation">[</span><span class="token string">'db'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$select_db</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;script>alert('数据库连接失败，请检查');&lt;/script>"</span><span class="token punctuation">;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"could not connect to the db:\n"</span> <span class="token punctuation">.</span>  <span class="token variable">$mysqli</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">error</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//获取该数据库下面所有的表和表注释</span><span class="token variable">$tablesql</span><span class="token operator">=</span><span class="token string">"Select table_name table_name,TABLE_COMMENT table_annotation from INFORMATION_SCHEMA.TABLES Where table_schema = '"</span><span class="token punctuation">.</span><span class="token variable">$mysql_conf</span><span class="token punctuation">[</span><span class="token string">'db'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token string">"'"</span><span class="token punctuation">;</span><span class="token variable">$tableresone</span> <span class="token operator">=</span> <span class="token variable">$mysqli</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token variable">$tablesql</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$tablerestwo</span> <span class="token operator">=</span> <span class="token variable">$mysqli</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token variable">$tablesql</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;ul class='zilist'>"</span><span class="token punctuation">;</span><span class="token variable">$newstr</span><span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$tablerow</span> <span class="token operator">=</span><span class="token variable">$tableresone</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">fetch_assoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$tablerow</span><span class="token punctuation">[</span><span class="token string">'table_annotation'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$newstr</span><span class="token punctuation">.</span><span class="token operator">=</span><span class="token string">"&lt;a href='#tab"</span><span class="token punctuation">.</span><span class="token variable">$tablerow</span><span class="token punctuation">[</span><span class="token string">'table_name'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token string">"'>"</span><span class="token punctuation">.</span><span class="token variable">$tablerow</span><span class="token punctuation">[</span><span class="token string">'table_name'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token string">"&lt;/a>"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token variable">$newstr</span><span class="token punctuation">.</span><span class="token operator">=</span><span class="token string">"&lt;a href='#tab"</span><span class="token punctuation">.</span><span class="token variable">$tablerow</span><span class="token punctuation">[</span><span class="token string">'table_name'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token string">"'>"</span><span class="token punctuation">.</span><span class="token variable">$tablerow</span><span class="token punctuation">[</span><span class="token string">'table_annotation'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token string">"&lt;/a>"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">echo</span> <span class="token variable">$newstr</span><span class="token punctuation">.</span><span class="token string">"&lt;/ul>"</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$tablerow</span> <span class="token operator">=</span><span class="token variable">$tablerestwo</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">fetch_assoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//    遍历数据库中的表名组装语句</span>    <span class="token variable">$infosql</span> <span class="token operator">=</span> "<span class="token constant">SELECT</span>                    `<span class="token constant">COLUMN_NAME</span>`<span class="token punctuation">,</span>                  `<span class="token constant">COLUMN_TYPE</span>`<span class="token punctuation">,</span>                  `<span class="token constant">DATA_TYPE</span>`<span class="token punctuation">,</span>                  `<span class="token constant">CHARACTER_MAXIMUM_LENGTH</span>`<span class="token punctuation">,</span>                  `<span class="token constant">IS_NULLABLE</span>`<span class="token punctuation">,</span>                  `<span class="token constant">COLUMN_DEFAULT</span>`<span class="token punctuation">,</span>                  `<span class="token constant">COLUMN_COMMENT</span>`               <span class="token constant">FROM</span>  <span class="token constant">INFORMATION_SCHEMA</span><span class="token punctuation">.</span><span class="token constant">COLUMNS</span>               where  table_schema <span class="token operator">=</span><span class="token string">'".$mysql_conf['</span>db<span class="token string">']."'</span> <span class="token keyword">AND</span>  table_name  <span class="token operator">=</span><span class="token string">'{$tablerow['</span>table_name<span class="token string">']}'</span>"<span class="token punctuation">;</span>    <span class="token variable">$infores</span> <span class="token operator">=</span> <span class="token variable">$mysqli</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token variable">$infosql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$infores</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"sql error:\n"</span> <span class="token punctuation">.</span> <span class="token variable">$mysqli</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;table class='tab'>"</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;caption>"</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">'&lt;h2 id="tab'</span><span class="token punctuation">.</span><span class="token variable">$tablerow</span><span class="token punctuation">[</span><span class="token string">'table_name'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token string">'">'</span><span class="token punctuation">.</span><span class="token variable">$tablerow</span><span class="token punctuation">[</span><span class="token string">'table_name'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token string">" "</span><span class="token punctuation">.</span><span class="token variable">$tablerow</span><span class="token punctuation">[</span><span class="token string">'table_annotation'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token string">"&lt;/h2>"</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> "<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>caption</span><span class="token punctuation">></span></span></span>                <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span></span>                    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span></span>小驼峰<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span></span>                    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span></span>字段名<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span></span>                    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span></span>数据类型<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span></span>                    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span></span>字段类型<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span></span>                    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span></span>长度<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span></span>                    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span></span>是否为空<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span></span>                    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span></span>默认值<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span></span>                    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span></span>备注<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span></span>                <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span></span>"<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$inforow</span> <span class="token operator">=</span> <span class="token variable">$infores</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">fetch_assoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token comment" spellcheck="true">//  遍历输出表中的各项字段的信息</span>        <span class="token keyword">echo</span> "<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span></span>            <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span></span><span class="token string">".convertUnderline($inforow['COLUMN_NAME'])."</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></span>            <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span></span><span class="token string">".$inforow['COLUMN_NAME']."</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></span>            <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>colu<span class="token punctuation">'</span></span><span class="token punctuation">></span></span></span><span class="token string">".$inforow['COLUMN_TYPE']."</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></span>            <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span></span><span class="token string">".$inforow['DATA_TYPE']."</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></span>            <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span></span><span class="token string">".$inforow['CHARACTER_MAXIMUM_LENGTH']."</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></span>            <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span></span><span class="token string">".$inforow['IS_NULLABLE']."</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></span>            <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span></span><span class="token string">".$inforow['COLUMN_DEFAULT']."</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></span>            <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span></span><span class="token string">" .$inforow['COLUMN_COMMENT']."</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></span>              <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span></span>"<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;/table>"</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;br>"</span><span class="token punctuation">;</span>    <span class="token variable">$infores</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">free</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$tableresone</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">free</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$tablerestwo</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">free</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$mysqli</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//PHP 转小驼峰</span><span class="token keyword">function</span> <span class="token function">convertUnderline</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$str</span> <span class="token operator">=</span> <span class="token function">preg_replace_callback</span><span class="token punctuation">(</span><span class="token string">'/([-_]+([a-z]{1}))/i'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token variable">$matches</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">strtoupper</span><span class="token punctuation">(</span><span class="token variable">$matches</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token variable">$str</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token delimiter">?></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>© 版权所有 <span class="token number">2018</span><span class="token operator">-</span><span class="token number">2019</span> Create By Aiti<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span></span>         window<span class="token punctuation">.</span>onload<span class="token operator">=</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token keyword">if</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollHeight<span class="token operator">&lt;</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientWidth<span class="token punctuation">)</span><span class="token punctuation">{</span>                document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"submit"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>              <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//下载数据字典详情</span>        <span class="token keyword">function</span>  <span class="token function">downloadInfo</span><span class="token punctuation">(</span>that<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//获取session中的数据</span>            <span class="token comment" spellcheck="true">// 使用outerHTML属性获取整个table元素的HTML代码（包括</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span></span>标签），然后包装成一个完整的<span class="token constant">HTML</span>文档，设置charset为urf<span class="token number">-8</span>以防止中文乱码            <span class="token keyword">var</span> html <span class="token operator">=</span> <span class="token string">"&lt;html>&lt;head>&lt;meta charset='utf-8' />&lt;/head>&lt;body>"</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//获取表格集合</span>            <span class="token keyword">var</span> objs <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"table"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//循环拼接</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>objs<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>               html<span class="token operator">+</span><span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"table"</span><span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>outerHTML<span class="token punctuation">;</span>              <span class="token punctuation">}</span>              html<span class="token operator">+</span><span class="token operator">=</span><span class="token string">"&lt;/body>&lt;/html>"</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 实例化一个Blob对象，其构造函数的第一个参数是包含文件内容的数组，第二个参数是包含文件类型属性的对象</span>            <span class="token keyword">var</span> blob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span>html<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> type<span class="token punctuation">:</span> <span class="token string">"application/vnd.ms-excel"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 利用URL.createObjectURL()方法为a元素生成blob URL</span>            that<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 设置文件名</span>            that<span class="token punctuation">.</span>download <span class="token operator">=</span> <span class="token string">"挨踢小子数据字典详细说明.xls"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>     <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>挨踢小子本着一个文件搞定一个工具的初心，因此全篇采用原生态手法，以HTML为骨架，CSS为装饰，JavaScript为灵魂，PHP为核心生命。完成本工具的开发，并以此献上，回馈长期以来关注我的号友们，在此深表感激。</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>挨踢小子SQL常用笔记整理</title>
      <link href="/2018/01/22/ai-ti-xiao-zi-sql-chang-yong-bi-ji-zheng-li/"/>
      <url>/2018/01/22/ai-ti-xiao-zi-sql-chang-yong-bi-ji-zheng-li/</url>
      
        <content type="html"><![CDATA[<h4 id="1、复制数据库表数据操作"><a href="#1、复制数据库表数据操作" class="headerlink" title="1、复制数据库表数据操作"></a>1、复制数据库表数据操作</h4><pre><code>//微信公众号：关注挨踢小子 1、如果是整个表复制表达如下：insert into table1 select  * from table22、如果是有选择性的复制数据表达如下：insert into table1(column1,column2,column3...) select column1,column2,colunm3...from table23、一个数据库中的表中的数据复制到另一个数据库中的一个表，使用方法如下：insert into 数据库A.dbo.table1(col1,col2,col3...) select col1,col2,col3... from 数据库B.dbo.table2 4、直接复制现有表重命名CREATE  TABLE 表名  AS SELECT 语句；</code></pre><h4 id="2、sql的子查询可以放到查询字段之中"><a href="#2、sql的子查询可以放到查询字段之中" class="headerlink" title="2、sql的子查询可以放到查询字段之中"></a>2、sql的子查询可以放到查询字段之中</h4><pre><code>//微信公众号：关注挨踢小子 select  name,age,(select date from tableB)from tableA  where age=&quot;12&quot;；</code></pre><h4 id="3、一张表中两个字段值互换（重点思想）"><a href="#3、一张表中两个字段值互换（重点思想）" class="headerlink" title="3、一张表中两个字段值互换（重点思想）"></a>3、一张表中两个字段值互换（重点思想）</h4><pre><code>//微信公众号：关注挨踢小子 update table a, table b set a.filed1= b.field2, a.field2= b.field1where a.id = b.id</code></pre><h4 id="4、实现数据库两列数据的上下移动操作"><a href="#4、实现数据库两列数据的上下移动操作" class="headerlink" title="4、实现数据库两列数据的上下移动操作"></a>4、实现数据库两列数据的上下移动操作</h4><pre><code>//微信公众号：关注挨踢小子 update test set priority=   (case when id=1  then    (select priority from test where id=2)    when id=2 then    (select priority from test where id=1) end)    where id=1 or id=2; </code></pre><h4 id="5、mysql合并字符串"><a href="#5、mysql合并字符串" class="headerlink" title="5、mysql合并字符串"></a>5、mysql合并字符串</h4><pre><code>//微信公众号：关注挨踢小子 concat(string1,string2,string3,…)select concat( &#39;1&#39;, &#39;01&#39;,&#39;02&#39;)// 10102  concat_ws(separator,str1,str2,...)select concat_ws(&#39;-&#39;,&#39;1&#39;,&#39;2&#39;,&#39;3&#39;)// 1-2-3group_concat()group_concat( [distinct] 要连接的字段 [order by 排序字段 asc/desc ] [separator &#39;分隔符&#39;] )// 例如：SELECT  group_concat(content  ORDER BY id DESC separator &#39;-&#39;) from t_noteinfo </code></pre><h4 id="6、删除重复数据，只保留最小ID编号"><a href="#6、删除重复数据，只保留最小ID编号" class="headerlink" title="6、删除重复数据，只保留最小ID编号"></a>6、删除重复数据，只保留最小ID编号</h4><pre><code>delete tablename where id not in(select min(id) from tablename group by name,………………)</code></pre><h4 id="7、两张关联表，删除主表中已经在副表中没有的信息"><a href="#7、两张关联表，删除主表中已经在副表中没有的信息" class="headerlink" title="7、两张关联表，删除主表中已经在副表中没有的信息"></a>7、两张关联表，删除主表中已经在副表中没有的信息</h4><pre><code>delete from info where not exists (select * from infobz where info.infid=infobz.infid)</code></pre><h4 id="8、日程安排提前五分钟提醒（日期操作）"><a href="#8、日程安排提前五分钟提醒（日期操作）" class="headerlink" title="8、日程安排提前五分钟提醒（日期操作）"></a>8、日程安排提前五分钟提醒（日期操作）</h4><pre><code>select * from 日程安排 where datediff(&#39;minute&#39;,f 开始时间,getdate())&gt;5</code></pre><h4 id="9、查询出每门课都大于90-分的学生姓名"><a href="#9、查询出每门课都大于90-分的学生姓名" class="headerlink" title="9、查询出每门课都大于90 分的学生姓名"></a>9、查询出每门课都大于90 分的学生姓名</h4><pre><code>select name from table group by name having min(fenshu)&gt;90</code></pre><h4 id="10、数据结构转换形式"><a href="#10、数据结构转换形式" class="headerlink" title="10、数据结构转换形式"></a>10、数据结构转换形式</h4><pre><code>//微信公众号：关注挨踢小子原表数据结构 year   month amount 1991   1     1.1 1991   2     1.2 1991   3     1.3 1991   4     1.4 1992   1     2.1 1992   2     2.2 1992   3     2.3 1992   4     2.4查成这样一个结果 year m1   m2   m3   m4 1991 1.1 1.2 1.3 1.4 1992 2.1 2.2 2.3 2.4select year,     (select amount from   aaa m where month=1   and m.year=aaa.year) as m1,    (select amount from   aaa m where month=2   and m.year=aaa.year) as m2,    (select amount from   aaa m where month=3   and m.year=aaa.year) as m3,    (select amount from   aaa m where month=4   and m.year=aaa.year) as m4from aaa   group by year</code></pre><h4 id="11、find-in-set笔记学习（历史文章有详解，此处略）"><a href="#11、find-in-set笔记学习（历史文章有详解，此处略）" class="headerlink" title="11、find_in_set笔记学习（历史文章有详解，此处略）"></a>11、find_in_set笔记学习（历史文章有详解，此处略）</h4><pre><code>SELECT t.dept_id FROM sys_dept t WHERE FIND_IN_SET (102,ancestors) </code></pre><h4 id="12、explain查看sql的具体的执行计划-历史文章有详解，此处略"><a href="#12、explain查看sql的具体的执行计划-历史文章有详解，此处略" class="headerlink" title="12、explain查看sql的具体的执行计划(历史文章有详解，此处略)"></a>12、explain查看sql的具体的执行计划(历史文章有详解，此处略)</h4><pre><code>//微信公众号：关注挨踢小子explain select * from tablename</code></pre>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>挨踢小子MySQL触发器介绍、创建、查看、删除</title>
      <link href="/2018/01/22/ai-ti-xiao-zi-mysql-hong-fa-qi-jie-shao-chuang-jian-cha-kan-shan-chu/"/>
      <url>/2018/01/22/ai-ti-xiao-zi-mysql-hong-fa-qi-jie-shao-chuang-jian-cha-kan-shan-chu/</url>
      
        <content type="html"><![CDATA[<h5 id="1、介绍"><a href="#1、介绍" class="headerlink" title="1、介绍"></a>1、介绍</h5><p>表述：顾名思义在条件符合某种情况时，被触发执行的相关操作。</p><p>时间：事件发生前<strong>before</strong>和发生后<strong>after</strong></p><p>事件：<br>名称     | 介绍<br>——– | —–<br><strong>update</strong>  | 可用<strong>old</strong>访问旧数据，<strong>new</strong>访问新数据<br><strong>delete</strong>  |  可用<strong>old</strong>访问旧数据<br><strong>insert</strong>     |  可用<strong>new</strong>访问新数据 </p><p><strong>其中new和old相当于一个对象，封装了当前操作数据的所有字段</strong></p><h5 id="2、创建"><a href="#2、创建" class="headerlink" title="2、创建"></a>2、创建</h5><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 公众号：挨踢小子</span><span class="token keyword">delimiter</span> <span class="token comment" spellcheck="true">//  重定义行结束符</span>    <span class="token keyword">create</span> <span class="token keyword">trigger</span> trigger_name trigger_time trigger_event <span class="token keyword">on</span> table_name <span class="token keyword">for each row</span>    <span class="token keyword">begin</span>    <span class="token comment" spellcheck="true">-- 需要执行的sql操作语句</span>    <span class="token keyword">end</span><span class="token comment" spellcheck="true">//</span><span class="token keyword">delimiter</span> <span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- delimiter          用于修改默认的行结束符，由于在触发器中有多条sql语句，他们需要使用分号来结束，但是触发器是一个整体，所以需要先更换默认的行结束符</span><span class="token comment" spellcheck="true">-- trigger_name     自定义触发器名</span><span class="token comment" spellcheck="true">-- trigger_time        时间点 before|after</span><span class="token comment" spellcheck="true">-- trigger_event     事件 delete|update|insert</span><span class="token comment" spellcheck="true">-- table_name         表名</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>案例：</strong></p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 公众号：挨踢小子</span><span class="token keyword">delimiter</span> <span class="token comment" spellcheck="true">//  </span><span class="token keyword">create</span> <span class="token keyword">trigger</span> t_name <span class="token keyword">after</span> <span class="token keyword">update</span> <span class="token keyword">on</span> sys_role <span class="token keyword">for each row</span><span class="token keyword">begin</span>  <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>sys_role<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>role_id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>role_name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>role_key<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>role_sort<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>data_scope<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span><span class="token keyword">status</span><span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>del_flag<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>create_by<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>create_time<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>update_by<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>update_time<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>remark<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">,</span> <span class="token string">'测试角色'</span><span class="token punctuation">,</span> <span class="token string">'test'</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">,</span> <span class="token string">'admin'</span><span class="token punctuation">,</span> <span class="token string">'2019-05-14 10:57:34'</span><span class="token punctuation">,</span> <span class="token string">'bigadmin'</span><span class="token punctuation">,</span> <span class="token string">'2019-06-13 15:04:48'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span>    <span class="token comment" spellcheck="true">//</span><span class="token keyword">delimiter</span> <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3、位置"><a href="#3、位置" class="headerlink" title="3、位置"></a>3、位置</h5><p>在mysql中所有触发器的定义都存在<strong>INFORMATION_SCHEMA</strong> 数据库的<strong>TRIGGERS</strong>表格中，可以通过<strong>SELECT</strong>来查看。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 公众号：挨踢小子</span><span class="token keyword">Select</span> <span class="token operator">*</span> <span class="token keyword">FROM</span>  INFORMATION_SCHEMA<span class="token punctuation">.</span>TRIGGERS <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>TRIGGERS表</strong><br>表字段| 解释<br>——– | —–<br><strong>TRIGGER_SCHEMA</strong>  | 表示触发器所在的数据库；<br><strong>TRIGGER_NAME</strong>| 后面是触发器的名称；<br><strong>EVENT_OBJECT_TABLE</strong>  | 表示在哪个数据表上触发<br><strong>ACTION_STATEMENT</strong>  |  表示触发器触发的时候执行的具体操作<br><strong>ACTION_ORIENTATION</strong>  | 是ROW ，表示在每条记录上都触发<br><strong>ACTION_TIMING</strong>   |  表示触发的时刻是<strong>AFTER</strong>，剩下的是和系统相关的信息</p><h5 id="4、查看"><a href="#4、查看" class="headerlink" title="4、查看"></a>4、查看</h5><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 公众号：挨踢小子</span><span class="token keyword">show</span> triggers<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true"># 查看所有触发器</span><span class="token keyword">show</span> <span class="token keyword">create</span> <span class="token keyword">trigger</span> 触发器名<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true"># 查看创建指定的触发器语句</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>展示：</strong><br><img src="https://img-blog.csdnimg.cn/2019082116110074.png" alt="在这里插入图片描述"></p><h5 id="5、删除"><a href="#5、删除" class="headerlink" title="5、删除"></a>5、删除</h5><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 公众号：挨踢小子</span><span class="token keyword">drop</span> <span class="token keyword">trigger</span> 触发器名<span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="6、注意"><a href="#6、注意" class="headerlink" title="6、注意"></a>6、注意</h5><p>1、  在使用触发器的时候需要注意，对于相同的表，相同的事件只能创建一个触发器。</p><p>2、  及时删除不再需要的触发器。否则会导致继续触发，从而影响数据的完整性。</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>挨踢小子MySQL数据字典源码</title>
      <link href="/2018/01/22/ai-ti-xiao-zi-mysql-shu-ju-zi-dian-yuan-ma/"/>
      <url>/2018/01/22/ai-ti-xiao-zi-mysql-shu-ju-zi-dian-yuan-ma/</url>
      
        <content type="html"><![CDATA[<blockquote><p>该工具由挨踢小子独家原创，以提高开发效率为目的，连接MySQL数据库，实时监测数据变化动态，供梳理需求和查询表结构字段。工具由PHP开发，适用于PHP运行环境之下。 </p></blockquote><h5 id="效果演示："><a href="#效果演示：" class="headerlink" title="效果演示："></a>效果演示：</h5><p><img src="https://img-blog.csdnimg.cn/20190821151932608.gif" alt="在这里插入图片描述"></p><h5 id="源码展示"><a href="#源码展示" class="headerlink" title="源码展示"></a>源码展示</h5><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token doctype">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/1999/xhtml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span></span>挨踢小子数据字典<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span></span><span class="token operator">*</span><span class="token punctuation">{</span>margin<span class="token punctuation">:</span>0px<span class="token punctuation">;</span>padding<span class="token punctuation">:</span>0px<span class="token punctuation">;</span>font<span class="token operator">-</span>size<span class="token punctuation">:</span>14px<span class="token punctuation">;</span><span class="token punctuation">}</span> h3<span class="token punctuation">{</span>line<span class="token operator">-</span>height<span class="token punctuation">:</span>50px<span class="token punctuation">;</span>text<span class="token operator">-</span>align<span class="token punctuation">:</span>center<span class="token punctuation">;</span>font<span class="token operator">-</span>size<span class="token punctuation">:</span>30px<span class="token punctuation">;</span>color<span class="token punctuation">:</span> <span class="token shell-comment comment">#800000;}</span><span class="token punctuation">.</span>boxtab<span class="token punctuation">{</span>width<span class="token punctuation">:</span><span class="token number">60</span><span class="token operator">%</span><span class="token punctuation">;</span> min<span class="token operator">-</span>width<span class="token punctuation">:</span>300px<span class="token punctuation">;</span>margin<span class="token punctuation">:</span>0px auto<span class="token punctuation">;</span>background<span class="token punctuation">:</span> <span class="token shell-comment comment">#F5F5DC;}</span><span class="token punctuation">.</span>search<span class="token operator">-</span>form<span class="token punctuation">{</span>width<span class="token punctuation">:</span> <span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">;</span>padding<span class="token punctuation">:</span> 10px 0px<span class="token punctuation">;</span> text<span class="token operator">-</span>align<span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span>myform <span class="token operator">></span>input<span class="token punctuation">{</span>width<span class="token punctuation">:</span><span class="token number">12</span><span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">.</span>myform <span class="token operator">></span>label<span class="token punctuation">{</span>font<span class="token operator">-</span>weight<span class="token punctuation">:</span> bolder<span class="token punctuation">;</span><span class="token punctuation">}</span>h2<span class="token punctuation">{</span>line<span class="token operator">-</span>height<span class="token punctuation">:</span>50px<span class="token punctuation">;</span>text<span class="token operator">-</span>align<span class="token punctuation">:</span>center<span class="token punctuation">;</span>font<span class="token operator">-</span>size<span class="token punctuation">:</span>20px<span class="token punctuation">;</span>line<span class="token operator">-</span>height<span class="token punctuation">:</span>35px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span>tab th<span class="token punctuation">{</span>background<span class="token punctuation">:</span> <span class="token shell-comment comment">#3F3F3F; padding: 5px;color:#FFF; line-height:25px;}</span><span class="token punctuation">.</span>tab tr td<span class="token punctuation">{</span>border<span class="token punctuation">:</span> 1px solid <span class="token shell-comment comment">#aaa;border-collapse: collapse;    line-height:30px;}</span><span class="token punctuation">.</span>zilist<span class="token punctuation">{</span>position<span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>left<span class="token punctuation">:</span> 6px<span class="token punctuation">;</span>top<span class="token punctuation">:</span><span class="token number">10</span><span class="token operator">%</span><span class="token punctuation">;</span>background<span class="token punctuation">:</span> <span class="token shell-comment comment">#F5F5DC;border: 1px solid #DCDCDC;padding: 10px 6px 6px 10px;    width: 16%; max-height:80% ;overflow:auto;}</span><span class="token punctuation">.</span>zilist a<span class="token punctuation">{</span>display<span class="token punctuation">:</span>block<span class="token punctuation">;</span>line<span class="token operator">-</span>height<span class="token punctuation">:</span>35px<span class="token punctuation">;</span>font<span class="token operator">-</span>size<span class="token punctuation">:</span>14px<span class="token punctuation">;</span>color<span class="token punctuation">:</span><span class="token shell-comment comment">#333;text-decoration: none;float: left;width: 48%;height:35px;overflow:hidden;text-align: center;border-bottom: 1px solid #aaa;}</span><span class="token punctuation">.</span>zilist a<span class="token punctuation">:</span>hover<span class="token punctuation">{</span>color<span class="token punctuation">:</span><span class="token shell-comment comment">#3F3F3F;font-weight: bolder;}</span><span class="token punctuation">.</span>zilist a<span class="token punctuation">:</span>nth<span class="token operator">-</span><span class="token function">child</span><span class="token punctuation">(</span>odd<span class="token punctuation">)</span><span class="token punctuation">{</span>border<span class="token operator">-</span>right<span class="token punctuation">:</span> 1px solid <span class="token shell-comment comment">#aaa;} </span>td <span class="token punctuation">{</span>padding<span class="token punctuation">:</span> 3px 5px 3px 10px<span class="token punctuation">;</span>vertical<span class="token operator">-</span>align<span class="token punctuation">:</span> top<span class="token punctuation">;</span>overflow<span class="token punctuation">:</span>hidden<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span>tab tr<span class="token punctuation">:</span>nth<span class="token operator">-</span><span class="token function">child</span><span class="token punctuation">(</span>odd<span class="token punctuation">)</span><span class="token punctuation">{</span>background<span class="token punctuation">:</span><span class="token shell-comment comment">#F5F5F5;}</span><span class="token punctuation">.</span>tab tr<span class="token punctuation">:</span>hover<span class="token punctuation">{</span>background<span class="token punctuation">:</span><span class="token shell-comment comment">#D2B48C;}</span><span class="token punctuation">.</span>colu<span class="token punctuation">{</span> max<span class="token operator">-</span>width<span class="token punctuation">:</span>150px<span class="token punctuation">}</span><span class="token punctuation">.</span>tab<span class="token punctuation">{</span>width<span class="token punctuation">:</span><span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">;</span>border<span class="token punctuation">:</span> 1px solid <span class="token shell-comment comment">#aaa;  border-collapse: collapse;}</span><span class="token punctuation">.</span>cor<span class="token punctuation">{</span>line<span class="token operator">-</span>height<span class="token punctuation">:</span>30px<span class="token punctuation">;</span>text<span class="token operator">-</span>align<span class="token punctuation">:</span>center<span class="token punctuation">;</span>color<span class="token punctuation">:</span> <span class="token shell-comment comment">#fff;background: #3F3F3F;position: fixed;bottom: 0; width: 60%;}</span><span class="token punctuation">.</span>footer<span class="token punctuation">{</span> height<span class="token punctuation">:</span>80px<span class="token punctuation">;</span>text<span class="token operator">-</span>align<span class="token punctuation">:</span>center<span class="token punctuation">;</span>width<span class="token punctuation">:</span> <span class="token number">60</span><span class="token operator">%</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span>menu a<span class="token punctuation">{</span>float<span class="token punctuation">:</span>right<span class="token punctuation">;</span>background<span class="token punctuation">:</span><span class="token shell-comment comment">#F5F5DC;font-weight: bolder;text-decoration: none;color:#B22222;border:0px;border-radius:5%;margin-left: 50px;}</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>boxtab<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>menu<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>   <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span></span>挨踢小子数据字典连接工具<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span></span>     <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>search-form<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>        <span class="token markup">&lt;form  class="myform"  name="myform" action="<span class="token prolog">&lt;?php echo $_SERVER['PHP_SELF'];?></span></span><span class="token string">" method="</span>post"<span class="token operator">></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span></span><span class="token constant">IP</span>地址：<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>host<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>host<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>127.0.0.1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></span>       <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span></span>数据库：<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>db<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>db<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mysql<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></span>       <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span></span>账户：<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>db_user<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>db_user<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></span>       <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span></span>密码：<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>db_pwd<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>db_pwd<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>123456<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>提交<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></span>      <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>     <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>downloadInfo(this)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>导出表格<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span> <span class="token delimiter">&lt;?php</span> <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Content-type: text/html; charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">date_default_timezone_set</span><span class="token punctuation">(</span><span class="token string">"PRC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** * @project: 挨踢小子数据字典详细说明 * @desc: 该文件应该放置于php运行环境之下，并配置下面的数据库。在建表过程中需要注意数据表注释，数据字段注释 * @author: Aiti  */</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'submit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"host"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"db"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"db_user"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"db_pwd"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$host</span><span class="token operator">=</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"host"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$db</span><span class="token operator">=</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"db"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$db_user</span><span class="token operator">=</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"db_user"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$db_pwd</span><span class="token operator">=</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"db_pwd"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token variable">$_SESSION</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;script>document.getElementById('host').value = '"</span><span class="token punctuation">.</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'host'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>"'<span class="token punctuation">;</span>                  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'db'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value <span class="token operator">=</span><span class="token string">'".$_SESSION['</span>db<span class="token string">']."'</span><span class="token punctuation">;</span>                  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'db_user'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value <span class="token operator">=</span><span class="token string">'".$_SESSION['</span>db_user<span class="token string">']."'</span><span class="token punctuation">;</span>                  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'db_pwd'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value <span class="token operator">=</span><span class="token string">'".$_SESSION['</span>db_pwd<span class="token string">']."'</span><span class="token punctuation">;</span>                  <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span>"<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>         <span class="token keyword">echo</span> <span class="token string">"&lt;script>alert('输入有误，请重新输入');&lt;/script>"</span><span class="token punctuation">;</span>        exit<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token variable">$mysql_conf</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>    <span class="token string">'host'</span>    <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$host</span><span class="token punctuation">,</span>    <span class="token string">'db'</span>      <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$db</span><span class="token punctuation">,</span>       <span class="token comment" spellcheck="true">//库名</span>    <span class="token string">'db_user'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$db_user</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//用户名</span>    <span class="token string">'db_pwd'</span>  <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$db_pwd</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//密码</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$mysqli</span> <span class="token operator">=</span> @<span class="token keyword">new</span> <span class="token class-name">mysqli</span><span class="token punctuation">(</span><span class="token variable">$mysql_conf</span><span class="token punctuation">[</span><span class="token string">'host'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$mysql_conf</span><span class="token punctuation">[</span><span class="token string">'db_user'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$mysql_conf</span><span class="token punctuation">[</span><span class="token string">'db_pwd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$mysqli</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">connect_errno</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//弹框问题说明</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;script>alert('输入有误，请重新输入');&lt;/script>"</span><span class="token punctuation">;</span>     <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"could not connect to the database:\n"</span> <span class="token punctuation">.</span> <span class="token variable">$mysqli</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">connect_error</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//诊断连接错误</span><span class="token punctuation">}</span><span class="token variable">$mysqli</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">"set names 'utf8';"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//编码转化</span><span class="token variable">$select_db</span> <span class="token operator">=</span> <span class="token variable">$mysqli</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">select_db</span><span class="token punctuation">(</span><span class="token variable">$mysql_conf</span><span class="token punctuation">[</span><span class="token string">'db'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$select_db</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;script>alert('数据库连接失败，请检查');&lt;/script>"</span><span class="token punctuation">;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"could not connect to the db:\n"</span> <span class="token punctuation">.</span>  <span class="token variable">$mysqli</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">error</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//获取该数据库下面所有的表和表注释</span><span class="token variable">$tablesql</span><span class="token operator">=</span><span class="token string">"Select table_name table_name,TABLE_COMMENT table_annotation from INFORMATION_SCHEMA.TABLES Where table_schema = '"</span><span class="token punctuation">.</span><span class="token variable">$mysql_conf</span><span class="token punctuation">[</span><span class="token string">'db'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token string">"'"</span><span class="token punctuation">;</span><span class="token variable">$tableresone</span> <span class="token operator">=</span> <span class="token variable">$mysqli</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token variable">$tablesql</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$tablerestwo</span> <span class="token operator">=</span> <span class="token variable">$mysqli</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token variable">$tablesql</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;ul class='zilist'>"</span><span class="token punctuation">;</span><span class="token variable">$newstr</span><span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$tablerow</span> <span class="token operator">=</span><span class="token variable">$tableresone</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">fetch_assoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$tablerow</span><span class="token punctuation">[</span><span class="token string">'table_annotation'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$newstr</span><span class="token punctuation">.</span><span class="token operator">=</span><span class="token string">"&lt;a href='#tab"</span><span class="token punctuation">.</span><span class="token variable">$tablerow</span><span class="token punctuation">[</span><span class="token string">'table_name'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token string">"'>"</span><span class="token punctuation">.</span><span class="token variable">$tablerow</span><span class="token punctuation">[</span><span class="token string">'table_name'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token string">"&lt;/a>"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token variable">$newstr</span><span class="token punctuation">.</span><span class="token operator">=</span><span class="token string">"&lt;a href='#tab"</span><span class="token punctuation">.</span><span class="token variable">$tablerow</span><span class="token punctuation">[</span><span class="token string">'table_name'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token string">"'>"</span><span class="token punctuation">.</span><span class="token variable">$tablerow</span><span class="token punctuation">[</span><span class="token string">'table_annotation'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token string">"&lt;/a>"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">echo</span> <span class="token variable">$newstr</span><span class="token punctuation">.</span><span class="token string">"&lt;/ul>"</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$tablerow</span> <span class="token operator">=</span><span class="token variable">$tablerestwo</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">fetch_assoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//    遍历数据库中的表名组装语句</span>    <span class="token variable">$infosql</span> <span class="token operator">=</span> "<span class="token constant">SELECT</span>                    `<span class="token constant">COLUMN_NAME</span>`<span class="token punctuation">,</span>                  `<span class="token constant">COLUMN_TYPE</span>`<span class="token punctuation">,</span>                  `<span class="token constant">DATA_TYPE</span>`<span class="token punctuation">,</span>                  `<span class="token constant">CHARACTER_MAXIMUM_LENGTH</span>`<span class="token punctuation">,</span>                  `<span class="token constant">IS_NULLABLE</span>`<span class="token punctuation">,</span>                  `<span class="token constant">COLUMN_DEFAULT</span>`<span class="token punctuation">,</span>                  `<span class="token constant">COLUMN_COMMENT</span>`               <span class="token constant">FROM</span>  <span class="token constant">INFORMATION_SCHEMA</span><span class="token punctuation">.</span><span class="token constant">COLUMNS</span>               where  table_schema <span class="token operator">=</span><span class="token string">'".$mysql_conf['</span>db<span class="token string">']."'</span> <span class="token keyword">AND</span>  table_name  <span class="token operator">=</span><span class="token string">'{$tablerow['</span>table_name<span class="token string">']}'</span>"<span class="token punctuation">;</span>    <span class="token variable">$infores</span> <span class="token operator">=</span> <span class="token variable">$mysqli</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token variable">$infosql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$infores</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"sql error:\n"</span> <span class="token punctuation">.</span> <span class="token variable">$mysqli</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;table class='tab'>"</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;caption>"</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">'&lt;h2 id="tab'</span><span class="token punctuation">.</span><span class="token variable">$tablerow</span><span class="token punctuation">[</span><span class="token string">'table_name'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token string">'">'</span><span class="token punctuation">.</span><span class="token variable">$tablerow</span><span class="token punctuation">[</span><span class="token string">'table_name'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token string">" "</span><span class="token punctuation">.</span><span class="token variable">$tablerow</span><span class="token punctuation">[</span><span class="token string">'table_annotation'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token string">"&lt;/h2>"</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> "<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>caption</span><span class="token punctuation">></span></span></span>                <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span></span>                    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span></span>小驼峰<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span></span>                    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span></span>字段名<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span></span>                    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span></span>数据类型<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span></span>                    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span></span>字段类型<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span></span>                    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span></span>长度<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span></span>                    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span></span>是否为空<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span></span>                    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span></span>默认值<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span></span>                    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span></span>备注<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span></span>                <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span></span>"<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$inforow</span> <span class="token operator">=</span> <span class="token variable">$infores</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">fetch_assoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token comment" spellcheck="true">//  遍历输出表中的各项字段的信息</span>        <span class="token keyword">echo</span> "<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span></span>            <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span></span><span class="token string">".convertUnderline($inforow['COLUMN_NAME'])."</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></span>            <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span></span><span class="token string">".$inforow['COLUMN_NAME']."</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></span>            <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>colu<span class="token punctuation">'</span></span><span class="token punctuation">></span></span></span><span class="token string">".$inforow['COLUMN_TYPE']."</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></span>            <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span></span><span class="token string">".$inforow['DATA_TYPE']."</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></span>            <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span></span><span class="token string">".$inforow['CHARACTER_MAXIMUM_LENGTH']."</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></span>            <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span></span><span class="token string">".$inforow['IS_NULLABLE']."</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></span>            <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span></span><span class="token string">".$inforow['COLUMN_DEFAULT']."</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></span>            <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span></span><span class="token string">" .$inforow['COLUMN_COMMENT']."</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></span>              <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span></span>"<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;/table>"</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;br>"</span><span class="token punctuation">;</span>    <span class="token variable">$infores</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">free</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$tableresone</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">free</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$tablerestwo</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">free</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$mysqli</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//PHP 转小驼峰</span><span class="token keyword">function</span> <span class="token function">convertUnderline</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$str</span> <span class="token operator">=</span> <span class="token function">preg_replace_callback</span><span class="token punctuation">(</span><span class="token string">'/([-_]+([a-z]{1}))/i'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token variable">$matches</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">strtoupper</span><span class="token punctuation">(</span><span class="token variable">$matches</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token variable">$str</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token delimiter">?></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>© 版权所有 <span class="token number">2018</span><span class="token operator">-</span><span class="token number">2019</span> Create By Aiti<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span></span>         window<span class="token punctuation">.</span>onload<span class="token operator">=</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token keyword">if</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollHeight<span class="token operator">&lt;</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientWidth<span class="token punctuation">)</span><span class="token punctuation">{</span>                document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"submit"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>              <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//下载数据字典详情</span>        <span class="token keyword">function</span>  <span class="token function">downloadInfo</span><span class="token punctuation">(</span>that<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//获取session中的数据</span>            <span class="token comment" spellcheck="true">// 使用outerHTML属性获取整个table元素的HTML代码（包括</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span></span>标签），然后包装成一个完整的<span class="token constant">HTML</span>文档，设置charset为urf<span class="token number">-8</span>以防止中文乱码            <span class="token keyword">var</span> html <span class="token operator">=</span> <span class="token string">"&lt;html>&lt;head>&lt;meta charset='utf-8' />&lt;/head>&lt;body>"</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//获取表格集合</span>            <span class="token keyword">var</span> objs <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"table"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//循环拼接</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>objs<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>               html<span class="token operator">+</span><span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"table"</span><span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>outerHTML<span class="token punctuation">;</span>              <span class="token punctuation">}</span>              html<span class="token operator">+</span><span class="token operator">=</span><span class="token string">"&lt;/body>&lt;/html>"</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 实例化一个Blob对象，其构造函数的第一个参数是包含文件内容的数组，第二个参数是包含文件类型属性的对象</span>            <span class="token keyword">var</span> blob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span>html<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> type<span class="token punctuation">:</span> <span class="token string">"application/vnd.ms-excel"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 利用URL.createObjectURL()方法为a元素生成blob URL</span>            that<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 设置文件名</span>            that<span class="token punctuation">.</span>download <span class="token operator">=</span> <span class="token string">"挨踢小子数据字典详细说明.xls"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>     <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>挨踢小子本着一个文件搞定一个工具的初心，因此全篇采用原生态手法，以HTML为骨架，CSS为装饰，JavaScript为灵魂，PHP为核心生命。完成本工具的开发，并以此献上，回馈长期以来关注我的号友们，在此深表感激。</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
